USE [SPX_STRAT_001]
GO
/****** Object:  Schema [SPX]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE SCHEMA [SPX]
GO
/****** Object:  Schema [SPX_IC]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE SCHEMA [SPX_IC]
GO
/****** Object:  Schema [SPX_IC_I]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE SCHEMA [SPX_IC_I]
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_ALLTIMES]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [SPX].[TF_GET_ALLTIMES]
(
    @T TIME(0),
    @TD INT
)
RETURNS @TimeRange TABLE 
(
    T TIME(0)
)
AS
BEGIN
    DECLARE 
        @MINT TIME(0) = @T,
        @MAXT TIME(0) = DATEADD(MINUTE, @TD, @T)

    -- Insert the initial time
    INSERT INTO @TimeRange (T) VALUES (@MINT)

    -- Loop through and insert every second until the END OF TIME!
    WHILE @MINT < @MAXT
    BEGIN
        SET @MINT = DATEADD(SECOND, 1, @MINT)
        INSERT INTO @TimeRange (T)
        VALUES (@MINT)
    END

    RETURN
END
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_CLOSESET]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
--   GET THE CLOSESET GIVEN CP AND OPENSET
-- =============================================
CREATE FUNCTION [SPX].[TF_GET_CLOSESET] (@ID_OPENSET INT, @ID_STOP INT, @SLIP DECIMAL(9,2))
RETURNS 
@Ret TABLE (ID_OPEN INT, ID_STOP INT, SID INT, LID INT, T TIME(0), CT TIME(0), CST INT, Expiry DATE, WK INT, DUR INT, NetRes DECIMAL(9,2), BP DECIMAL(9,2), RSK DECIMAL(9,2), PT DECIMAL(9,2), ST DECIMAL(9,2), O DECIMAL(9,2))
AS
BEGIN

	--=== GET THE CLOSESET GIVEN CP AND OPENSET
	--DECLARE @ID_OPENSET INT = 1,  @ID_STOP INT = 1, @SLIP DECIMAL(9,2) = .10
	DECLARE @Fee DECIMAL(9,4) = .0097

	INSERT INTO @Ret
	SELECT O.ID_OPEN, CS.ID_STOP, O.SID, O.LID, O.T, CS.CT, CS.CST, O.Expiry, DATEPART(WEEK,O.Expiry) WK, 
		DATEDIFF(MINUTE,O.T,CT) DUR, NetRes-IIF(CST=2,@SLIP,0) NetRes,
		O.O-OP.W BP, IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP RSK, S.PT, S.ST, O.O
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
	INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
	WHERE OP.ID_OPENSET=@ID_OPENSET AND CS.ID_STOP = @ID_STOP
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_CLOSESETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
--   GET THE CLOSESET GIVEN CP AND OPENSET
-- =============================================
CREATE FUNCTION [SPX].[TF_GET_CLOSESETS] (@ID_OPENSET INT, @SLIP DECIMAL(9,2))
RETURNS 
@Ret TABLE (ID_STOP INT, Expiry DATE, WK INT, DUR INT, NetRes DECIMAL(9,2), BP DECIMAL(9,2), RSK DECIMAL(9,2), CST INT, CT TIME(0))
AS
BEGIN

	--=== GET THE CLOSESET GIVEN CP AND OPENSET
	--DECLARE @ID_OPENSET INT = 1, @SLIP DECIMAL(9,2) = .10
	DECLARE @Fee DECIMAL(9,4) = .0097

	INSERT INTO @Ret
	SELECT CS.ID_STOP, O.Expiry, DATEPART(WEEK,O.Expiry) WK, 
		DATEDIFF(MINUTE,O.T,CT) DUR, NetRes-IIF(CST=2,@SLIP,0) NetRes,
		O.O-OP.W BP, IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP RSK, CS.CST, CT
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
	INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
	WHERE OP.ID_OPENSET=@ID_OPENSET
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_LISTS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Description:	Returns a list of values
-- =============================================
CREATE FUNCTION [SPX].[TF_GET_LISTS]
(
	@Min DECIMAL(9,2), @Max DECIMAL(9,2), @Inc DECIMAL(9,2)
)
RETURNS 
@Ret TABLE ( V DECIMAL(9,2) )
AS
BEGIN

	WHILE @Min <= @Max
	BEGIN
		INSERT INTO @Ret SELECT @Min V
		SET @Min = @Min + @Inc
	END
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [SPX_IC].[TF_GET_CLOSESETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
--   GET THE CLOSESET GIVEN CP AND OPENSET
-- =============================================
CREATE FUNCTION [SPX_IC].[TF_GET_CLOSESETS] (@IC_OPENSET INT, @SLIP DECIMAL(9,2))
RETURNS 
@Ret TABLE (ID_STOP INT, Expiry DATE, WK INT, DUR INT, NetRes DECIMAL(9,2), BP DECIMAL(9,2), RSK DECIMAL(9,2), CST INT, CT TIME(0))
AS
BEGIN

	--=== GET THE CLOSESET GIVEN CP AND OPENSET
	--DECLARE @IC_OPENSET INT = 1, @SLIP DECIMAL(9,2) = .10
	DECLARE @Fee DECIMAL(9,4) = .0097

	INSERT INTO @Ret
	SELECT CS.ID_STOP, O.Expiry, DATEPART(WEEK,O.Expiry) WK, 
		DATEDIFF(MINUTE,O.T,CT) DUR, NetRes-IIF(CST=2,@SLIP,0) NetRes,
		(O.O-LOP.W)*2 BP, IIF(S.ST=0,O.O-LOP.W,S.ST)-@Fee-@SLIP RSK, CS.CST, CT
	FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS OP
	INNER JOIN SPX_STRAT_001.SPX.OPEN_PARAMS LOP ON LOP.ID_OPENSET=OP.L_ID_OPENSET
	INNER JOIN SPX_STRAT_001.SPX_IC.OPENSETS OS ON OS.IC_OPENSET=OP.IC_OPENSET
	INNER JOIN SPX_STRAT_001.SPX_IC.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_STRAT_001.SPX_IC.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
	INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
	WHERE OP.IC_OPENSET=@IC_OPENSET
	
	RETURN 
END
GO
/****** Object:  Table [SPX].[OPEN_PARAMS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[OPEN_PARAMS](
	[ID_OPENSET] [int] IDENTITY(1,1) NOT NULL,
	[O] [decimal](9, 2) NOT NULL,
	[O_PLUS] [decimal](9, 2) NOT NULL,
	[EMX] [decimal](9, 2) NOT NULL,
	[EMX_PLUS] [decimal](9, 2) NOT NULL,
	[CP] [int] NOT NULL,
	[W] [int] NOT NULL,
	[T] [time](0) NOT NULL,
	[TD] [int] NOT NULL,
	[MinDate] [date] NOT NULL,
	[MaxDate] [date] NOT NULL,
	[Cnt] [int] NOT NULL,
	[SORT] [int] NULL,
 CONSTRAINT [PK_OPEN_PARAMS] PRIMARY KEY CLUSTERED 
(
	[ID_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [SPX].[OPENS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[OPENS](
	[ID_OPEN] [int] IDENTITY(1,1) NOT NULL,
	[SID] [int] NOT NULL,
	[LID] [int] NOT NULL,
	[SS] [smallint] NOT NULL,
	[ER] [decimal](9, 2) NOT NULL,
	[O] [decimal](9, 2) NOT NULL,
	[Expiry] [date] NOT NULL,
	[T] [time](0) NOT NULL,
 CONSTRAINT [PK_OPENS] PRIMARY KEY CLUSTERED 
(
	[ID_OPEN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_SID_LID_T] UNIQUE NONCLUSTERED 
(
	[SID] ASC,
	[LID] ASC,
	[T] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [SPX].[OPENSETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[OPENSETS](
	[ID_OPEN] [int] NOT NULL,
	[ID_OPENSET] [int] NOT NULL,
 CONSTRAINT [PK_OPENSETS] PRIMARY KEY CLUSTERED 
(
	[ID_OPEN] ASC,
	[ID_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_OPENSET]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
-- Description:	RETRIEVES AN EXISTING OPENSET
-- =============================================
CREATE FUNCTION [SPX].[TF_GET_OPENSET] (@ID_OPENSET INT)
RETURNS TABLE 
AS
RETURN 
(
	SELECT O.* FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
	INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	WHERE OP.ID_OPENSET=@ID_OPENSET
)
GO
/****** Object:  Table [SPX_IC].[OPEN_PARAMS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC].[OPEN_PARAMS](
	[IC_OPENSET] [int] IDENTITY(1,1) NOT NULL,
	[L_ID_OPENSET] [int] NOT NULL,
	[S_ID_OPENSET] [int] NOT NULL,
 CONSTRAINT [PK_OPEN_PARAMS_IC] PRIMARY KEY CLUSTERED 
(
	[IC_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [SPX_IC].[OPENS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC].[OPENS](
	[ID_OPEN] [int] IDENTITY(1,1) NOT NULL,
	[L_SID] [int] NOT NULL,
	[L_LID] [int] NOT NULL,
	[S_SID] [int] NOT NULL,
	[S_LID] [int] NOT NULL,
	[Expiry] [date] NOT NULL,
	[T] [time](0) NOT NULL,
	[ER] [decimal](9, 2) NOT NULL,
	[O] [decimal](9, 2) NOT NULL,
 CONSTRAINT [PK_OPENS_IC] PRIMARY KEY CLUSTERED 
(
	[ID_OPEN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_SID_LID_T_IC] UNIQUE NONCLUSTERED 
(
	[L_SID] ASC,
	[L_LID] ASC,
	[S_SID] ASC,
	[S_LID] ASC,
	[T] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [SPX_IC].[OPENSETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC].[OPENSETS](
	[ID_OPEN] [int] NOT NULL,
	[IC_OPENSET] [int] NOT NULL,
 CONSTRAINT [PK_OPENSETS_IC] PRIMARY KEY CLUSTERED 
(
	[ID_OPEN] ASC,
	[IC_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [SPX_IC].[TF_GET_OPENSET]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
-- Description:	RETRIEVES AN EXISTING OPENSET
-- =============================================
CREATE FUNCTION [SPX_IC].[TF_GET_OPENSET] (@IC_OPENSET INT)
RETURNS TABLE 
AS
RETURN 
(
	SELECT O.* FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS OP
	INNER JOIN SPX_STRAT_001.SPX_IC.OPENSETS OS ON OS.IC_OPENSET=OP.IC_OPENSET
	INNER JOIN SPX_STRAT_001.SPX_IC.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	WHERE OP.IC_OPENSET=@IC_OPENSET
)
GO
/****** Object:  Table [SPX].[RES]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[RES](
	[ProcTime] [datetime2](0) NULL,
	[ID_OPENSET] [int] NULL,
	[ID_STOP] [int] NULL,
	[SLIP] [decimal](9, 2) NULL,
	[W_AvgRes] [decimal](9, 2) NULL,
	[W_Std] [decimal](9, 2) NULL,
	[W_WP] [decimal](9, 2) NULL,
	[W_Cnt] [int] NULL,
	[W_Sharpe] [decimal](9, 2) NULL,
	[Y_Sharpe] [decimal](9, 2) NULL,
	[WP] [decimal](9, 2) NULL,
	[BP] [decimal](9, 2) NULL,
	[RSK] [decimal](9, 2) NULL,
	[ROBP] [decimal](9, 2) NULL,
	[ROR] [decimal](9, 2) NULL,
	[SumRes] [decimal](9, 2) NULL,
	[AvgRes] [decimal](9, 2) NULL,
	[AvgUp] [decimal](9, 2) NULL,
	[AvgDown] [decimal](9, 2) NULL,
	[MaxUp] [decimal](9, 2) NULL,
	[MaxDown] [decimal](9, 2) NULL,
	[Cnt] [int] NULL,
	[Cnt_0] [int] NULL,
	[Cnt_1] [int] NULL,
	[Cnt_2] [int] NULL,
	[AvgDur] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [SPX].[V_RES]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [SPX].[V_RES]
AS
SELECT        CAST(CONCAT(R.ID_OPENSET, R.ID_STOP) AS INT) AS ID,
				S.ST, S.PT, OP.T, OP.CP, OP.O, OP.O_PLUS, R.ProcTime, R.ID_OPENSET, R.ID_STOP, R.SLIP, R.W_AvgRes,
				R.W_Std, R.W_WP, R.W_Cnt, R.W_Sharpe, R.Y_Sharpe, R.WP, R.BP, R.RSK, R.ROBP, R.ROR, R.SumRes, R.AvgRes, R.AvgUp, 
                         R.AvgDown, R.MaxUp, R.MaxDown, R.Cnt, R.Cnt_0, R.Cnt_1, R.Cnt_2, R.AvgDur, OP.SORT
FROM            SPX.RES AS R INNER JOIN
                         SPX.OPEN_PARAMS AS OP ON OP.ID_OPENSET = R.ID_OPENSET INNER JOIN
                         SPX_VERT.SPX.STOPS AS S ON S.ID_STOP = R.ID_STOP
GO
/****** Object:  Table [SPX].[CLOSESETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[CLOSESETS](
	[ID_STOP] [int] NOT NULL,
	[ID_OPEN] [int] NOT NULL,
	[CT] [time](0) NULL,
	[CST] [int] NOT NULL,
	[NetRes] [decimal](12, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [SPX].[RES_IC_FULL]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[RES_IC_FULL](
	[T] [time](0) NULL,
	[S_ID_OPENSET] [int] NULL,
	[L_ID_OPENSET] [int] NULL,
	[S_ID_STOP] [int] NULL,
	[L_ID_STOP] [int] NULL,
	[SCnt] [int] NULL,
	[LCnt] [int] NULL,
	[Y_Sharpe] [decimal](9, 2) NULL,
	[SumRes] [decimal](9, 2) NULL,
	[AvgRes] [decimal](9, 2) NULL,
	[AvgUp] [decimal](9, 2) NULL,
	[AvgDown] [decimal](9, 2) NULL,
	[MaxUp] [decimal](9, 2) NULL,
	[MaxDown] [decimal](9, 2) NULL,
	[WP] [decimal](9, 2) NULL,
	[CntUp] [int] NULL,
	[Cnt] [int] NULL,
	[BP] [decimal](9, 2) NULL,
	[RSK] [decimal](9, 2) NULL,
	[WW] [decimal](9, 2) NULL,
	[LW] [decimal](9, 2) NULL,
	[WL] [decimal](9, 2) NULL,
	[LL] [decimal](9, 2) NULL,
	[W_Sharpe] [decimal](9, 2) NULL,
	[ROBP] [decimal](9, 2) NULL,
	[ROR] [decimal](9, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [SPX].[VERT_OPENS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[VERT_OPENS](
	[Expiry] [date] NOT NULL,
	[T] [time](0) NULL,
	[CP] [smallint] NOT NULL,
	[W] [smallint] NOT NULL,
	[SID] [int] NOT NULL,
	[LID] [int] NOT NULL,
	[SS] [smallint] NOT NULL,
	[LS] [smallint] NOT NULL,
	[O] [numeric](9, 2) NOT NULL,
	[EMX] [decimal](9, 2) NOT NULL,
	[ER] [numeric](9, 2) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [SPX_IC].[CLOSESETS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC].[CLOSESETS](
	[ID_STOP] [int] NOT NULL,
	[ID_OPEN] [int] NOT NULL,
	[CT] [time](0) NULL,
	[CST] [int] NOT NULL,
	[NetRes] [decimal](12, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [SPX_IC].[RES]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC].[RES](
	[ProcTime] [datetime2](0) NULL,
	[ID_OPENSET] [int] NULL,
	[ID_STOP] [int] NULL,
	[SLIP] [decimal](9, 2) NULL,
	[W_AvgRes] [decimal](9, 2) NULL,
	[W_Std] [decimal](9, 2) NULL,
	[W_WP] [decimal](9, 2) NULL,
	[W_Cnt] [int] NULL,
	[W_Sharpe] [decimal](9, 2) NULL,
	[Y_Sharpe] [decimal](9, 2) NULL,
	[WP] [decimal](9, 2) NULL,
	[BP] [decimal](9, 2) NULL,
	[RSK] [decimal](9, 2) NULL,
	[ROBP] [decimal](9, 2) NULL,
	[ROR] [decimal](9, 2) NULL,
	[SumRes] [decimal](9, 2) NULL,
	[AvgRes] [decimal](9, 2) NULL,
	[AvgUp] [decimal](9, 2) NULL,
	[AvgDown] [decimal](9, 2) NULL,
	[MaxUp] [decimal](9, 2) NULL,
	[MaxDown] [decimal](9, 2) NULL,
	[Cnt] [int] NULL,
	[Cnt_0] [int] NULL,
	[Cnt_1] [int] NULL,
	[Cnt_2] [int] NULL,
	[AvgDur] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [SPX_IC_I].[RES]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX_IC_I].[RES](
	[ProcTime] [datetime2](0) NULL,
	[IC_OPENSET] [int] NULL,
	[SLIP] [decimal](9, 2) NULL,
	[IC_ID_STOP] [int] NULL,
	[L_ID_STOP] [int] NULL,
	[S_ID_STOP] [int] NULL,
	[W_AvgRes] [decimal](38, 6) NULL,
	[W_Std] [decimal](9, 2) NULL,
	[W_WP] [decimal](9, 2) NULL,
	[W_Cnt] [int] NULL,
	[W_Sharpe] [decimal](9, 2) NULL,
	[Y_Sharpe] [decimal](20, 2) NULL,
	[WP] [decimal](20, 3) NULL,
	[SumRes] [decimal](38, 2) NULL,
	[AvgRes] [decimal](38, 6) NULL,
	[AvgUp] [decimal](20, 2) NULL,
	[AvgDown] [decimal](20, 2) NULL,
	[MaxUp] [decimal](20, 2) NULL,
	[MaxDown] [decimal](20, 2) NULL,
	[Cnt] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25585_25584]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25585_25584] ON [SPX].[CLOSESETS]
(
	[ID_STOP] ASC
)
INCLUDE([ID_OPEN],[CST],[NetRes]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25614_25613]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25614_25613] ON [SPX].[CLOSESETS]
(
	[ID_OPEN] ASC
)
INCLUDE([ID_STOP],[CT],[CST],[NetRes]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25579_25578]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25579_25578] ON [SPX].[RES]
(
	[ID_OPENSET] ASC,
	[ROR] ASC
)
INCLUDE([ID_STOP],[W_Sharpe]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25637_25636]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25637_25636] ON [SPX_IC].[CLOSESETS]
(
	[ID_STOP] ASC,
	[ID_OPEN] ASC,
	[CT] ASC,
	[CST] ASC,
	[NetRes] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25952_25951]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25952_25951] ON [SPX_IC].[CLOSESETS]
(
	[ID_OPEN] ASC
)
INCLUDE([ID_STOP],[CT],[CST],[NetRes]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25616_25615]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25616_25615] ON [SPX_IC].[OPENSETS]
(
	[IC_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_25954_25953]    Script Date: 8/2/2024 12:21:28 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_25954_25953] ON [SPX_IC].[RES]
(
	[ID_OPENSET] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [SPX].[CLOSESETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPEN_CS] FOREIGN KEY([ID_OPEN])
REFERENCES [SPX].[OPENS] ([ID_OPEN])
GO
ALTER TABLE [SPX].[CLOSESETS] CHECK CONSTRAINT [FK_ID_OPEN_CS]
GO
ALTER TABLE [SPX].[OPENSETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPEN] FOREIGN KEY([ID_OPEN])
REFERENCES [SPX].[OPENS] ([ID_OPEN])
GO
ALTER TABLE [SPX].[OPENSETS] CHECK CONSTRAINT [FK_ID_OPEN]
GO
ALTER TABLE [SPX].[OPENSETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPENSET] FOREIGN KEY([ID_OPENSET])
REFERENCES [SPX].[OPEN_PARAMS] ([ID_OPENSET])
GO
ALTER TABLE [SPX].[OPENSETS] CHECK CONSTRAINT [FK_ID_OPENSET]
GO
ALTER TABLE [SPX_IC].[CLOSESETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPEN_SPX_IC_CS] FOREIGN KEY([ID_OPEN])
REFERENCES [SPX_IC].[OPENS] ([ID_OPEN])
GO
ALTER TABLE [SPX_IC].[CLOSESETS] CHECK CONSTRAINT [FK_ID_OPEN_SPX_IC_CS]
GO
ALTER TABLE [SPX_IC].[OPENSETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPEN_IC] FOREIGN KEY([ID_OPEN])
REFERENCES [SPX_IC].[OPENS] ([ID_OPEN])
GO
ALTER TABLE [SPX_IC].[OPENSETS] CHECK CONSTRAINT [FK_ID_OPEN_IC]
GO
ALTER TABLE [SPX_IC].[OPENSETS]  WITH CHECK ADD  CONSTRAINT [FK_ID_OPENSET_IC] FOREIGN KEY([IC_OPENSET])
REFERENCES [SPX_IC].[OPEN_PARAMS] ([IC_OPENSET])
GO
ALTER TABLE [SPX_IC].[OPENSETS] CHECK CONSTRAINT [FK_ID_OPENSET_IC]
GO
/****** Object:  StoredProcedure [SPX].[SP_A_GET_THINGS_DONE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	GET IT ALL DONE
-- =============================================
CREATE PROCEDURE [SPX].[SP_A_GET_THINGS_DONE]
@ID_OPENSET INT, @Inc DECIMAL(9,2)
AS
BEGIN

	EXEC SPX_STRAT_001.SPX.SP_PREP_VERT_OPENS '10:00', 20, 10, '2024-03-01'				--00:45
	EXEC SPX_STRAT_001.SPX.SP_OPENSET_CREATE_BATCH '10:00', 20, -1, 10, '2024-03-01'	--00:21
	EXEC SPX_STRAT_001.SPX.SP_OPENSET_CREATE_BATCH '10:00', 20, 1, 10, '2024-03-01'		--00:19
	EXEC SPX_STRAT_001.SPX.SP_CLOSESET_CREATE_BATCH '10:00'								--03:30
	EXEC SPX_STRAT_001.SPX.SP_RES_CREATE_BATCH 0.05										--04:09

	WHILE 1 = 1
	BEGIN
	EXEC SPX_STRAT_001.SPX.SP_IC_CREATE_BATCH_FULL '10:00', '2024-03-01'
	END

	--==== THIS IS THE IC ONLY RES CREATE SETUP
	EXEC SPX_STRAT_001.SPX_IC.SP_OPENSET_CREATE_BATCH									--00:33
	EXEC SPX_STRAT_001.SPX_IC.SP_CLOSESET_CREATE_BATCH '10:00'							--18:00
	EXEC SPX_STRAT_001.SPX_IC.SP_RES_CREATE_BATCH

	EXEC SPX_STRAT_001.SPX_IC_I.SP_RES_CREATE_BATCH ---- THIS REQUIRES THAT THE IC SET BE MADE FIRST
	EXEC SPX_STRAT_001.SPX_IC_X.SP_RES_CREATE_BATCH

END

GO
/****** Object:  StoredProcedure [SPX].[SP_A_NIGHTLY_REFRESH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	NIGHTLY REFRESH -- only refreshes the opens, the opensets, the closesets, not the res or IC
-- =============================================
CREATE PROCEDURE [SPX].[SP_A_NIGHTLY_REFRESH]

AS
BEGIN

	EXEC SPX_STRAT_001.SPX.SP_PREP_VERT_OPENS '10:00', 20, 10, '2024-03-01'				--00:45
	EXEC SPX_STRAT_001.SPX.SP_OPENSET_CREATE_BATCH '10:00', 20, -1, 10, '2024-03-01'	--00:21
	EXEC SPX_STRAT_001.SPX.SP_OPENSET_CREATE_BATCH '10:00', 20, 1, 10, '2024-03-01'		--00:19
	EXEC SPX_STRAT_001.SPX.SP_CLOSESET_CREATE_BATCH '10:00'								--03:30


	EXEC sp_msforeachtable 'SET QUOTED_IDENTIFIER ON; ALTER INDEX ALL ON ? REBUILD'

END

GO
/****** Object:  StoredProcedure [SPX].[SP_CLOSESET_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	Create Close Data - using OPENSET ID
-- EXEC SPX_STRAT_001.SPX.SP_CLOSESET_CREATE_OPENSET @ID_OPENSET, @Inc
-- =============================================
CREATE PROCEDURE [SPX].[SP_CLOSESET_CREATE]
@ID_OPENSET INT, @Inc DECIMAL(9,2)
AS
BEGIN
	SET NOCOUNT ON;
	--======== WE ARE GOING ON THE ASSUMPTION THAT WE NEVER CHANGE THE STOP COUNT
	--DECLARE @ID_OPENSET INT = 100, @Inc DECIMAL(9,2) = .05
	DECLARE @uSLIP DECIMAL(9,2) = .05, @Fee DECIMAL(9,4) = .0097

	DROP TABLE IF EXISTS #OPENSET
	DROP TABLE IF EXISTS #RAWCLOSE
	DROP TABLE IF EXISTS #OPENS_ALL_WITH_PTST

	--=== GRAB THE OPENSET FOR THE GIVE ID AND CP
	SELECT * INTO #OPENSET FROM SPX_STRAT_001.SPX.TF_GET_OPENSET(@ID_OPENSET)
	WHERE ID_OPEN NOT IN (SELECT ID_OPEN FROM SPX_STRAT_001.SPX.CLOSESETS GROUP BY ID_OPEN HAVING COUNT(*) = 8464)

	--=== GRAB THE CLOSE DATA AND FORMAT IT
	SELECT OSS.ID_OPEN, V.T CT, OSS.O-V.O CR INTO #CLOSEDATA FROM #OPENSET OSS
	INNER JOIN SPX_VERT.SPX.VERT V ON V.SID=OSS.SID AND V.LID=OSS.LID AND V.T>OSS.T AND V.T <= '13:00'
	WHERE V.O > 0 AND V.O < V.W

	--=== GRAB ANY PT HITS
	SELECT PT, ID_OPEN, CT, CR INTO #PT_HIT FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY ID_OPEN, PT ORDER BY CT ASC) Rn
		FROM #CLOSEDATA CDS
		CROSS JOIN (SELECT DISTINCT PT FROM SPX_VERT.SPX.STOPS) S
		WHERE CDS.CR >= (S.PT+@uSLIP) AND S.PT <> 0
	) A WHERE RN = 1

	--=== GRAB ANY PT HITS
	SELECT ST, ID_OPEN, CT, CR INTO #ST_HIT FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY ID_OPEN, ST ORDER BY CT ASC) Rn
		FROM #CLOSEDATA CDS
		CROSS JOIN (SELECT DISTINCT ST FROM SPX_VERT.SPX.STOPS) S
		WHERE CDS.CR <= S.ST AND S.ST <> 0
	) A WHERE RN = 1

	--=== GRAB THE STOP*OPENSET
	SELECT ID_OPEN, ER, ID_STOP, PT, ST INTO #OS_STOP_COMBO FROM #OPENSET OS
	CROSS JOIN SPX_VERT.SPX.STOPS S

	--=== COMBINE THE PT and ST SETS AND EXPIRED RESULTS
	SELECT O.ID_STOP, O.ID_OPEN, 
		IIF(PT.PT IS NULL AND ST.ST IS NULL, '13:00',
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, PT.CT,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, ST.CT,
		IIF(PT.CT<ST.CT, PT.CT, ST.CT)))) CT,
		IIF(PT.PT IS NULL AND ST.ST IS NULL, ER,
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, PT.PT,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, ST.ST,
		IIF(PT.CT<ST.CT, PT.PT, ST.ST)))) CR,
		IIF(PT.PT IS NULL AND ST.ST IS NULL, 0,
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, 1,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, 2,
		IIF(PT.CT<ST.CT, 1, 2)))) CST
	INTO #FINAL
	FROM #OS_STOP_COMBO O
	LEFT JOIN #PT_HIT PT ON PT.ID_OPEN=O.ID_OPEN AND PT.PT=O.PT
	LEFT JOIN #ST_HIT ST ON ST.ID_OPEN=O.ID_OPEN AND ST.ST=O.ST
	
	--=== APPLY THE FEES AND INSERT INTO THE TABLE
	INSERT INTO SPX_STRAT_001.SPX.CLOSESETS (ID_STOP, ID_OPEN, CT, CST, NetRes)
	SELECT A.* FROM
	(SELECT F.ID_STOP, F.ID_OPEN, F.CT, F.CST, CAST( F.CR-IIF(F.CST=0, (@Fee*2), IIF(F.CST=1, (@Fee*4), IIF(F.CST=2, (@Fee*4), (@Fee*2)))) AS DECIMAL(9,2)) NetRes FROM #FINAL F) A
	LEFT JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_STOP=A.ID_STOP AND CS.ID_OPEN=A.ID_OPEN AND CS.CT=A.CT AND CS.CST=A.CST AND CS.NetRes=A.NetRes
	WHERE CS.ID_STOP IS NULL

	--=== CLEAN UP BEFORE AND AFTER
	DROP TABLE IF EXISTS #OPENSET
	DROP TABLE IF EXISTS #CLOSEDATA
	DROP TABLE IF EXISTS #PT_HIT
	DROP TABLE IF EXISTS #ST_HIT
	DROP TABLE IF EXISTS #OS_STOP_COMBO
	DROP TABLE IF EXISTS #FINAL

END

GO
/****** Object:  StoredProcedure [SPX].[SP_CLOSESET_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 05-02-24
-- Description:	Runs all availble opensets (with misSPXg close) to fetch close data.
-- =============================================
CREATE PROCEDURE [SPX].[SP_CLOSESET_CREATE_BATCH]
@T TIME(0)
AS
BEGIN

	SET NOCOUNT ON;
	DECLARE @Inc DECIMAL(9,2) = .05, @MSG VARCHAR(MAX), @Cnt INT, @ID_OPENSET INT
	--DECLARE @T TIME(0) = '11:50'

	--=============== THIS GRABS ANY ID_OPENSET THAT HAS NO OR PARTIAL CLOSEDATA
	DROP TABLE IF EXISTS #ID_OPENSETS
	SELECT OP.ID_OPENSET INTO #ID_OPENSETS
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	LEFT JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
	LEFT JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	CROSS APPLY (SELECT COUNT(*) CCnt FROM SPX_STRAT_001.SPX.CLOSESETS CS WHERE CS.ID_OPEN=OS.ID_OPEN) CS
	GROUP BY OP.ID_OPENSET, OP.MinDate, OP.MaxDate, OP.Cnt
	HAVING (SUM(CCnt)/(8464)) < COUNT(O.ID_OPEN)

	SELECT @Cnt=COUNT(*) FROM #ID_OPENSETS
	WHILE ((SELECT COUNT(*) FROM #ID_OPENSETS)>0)
	BEGIN

		SELECT TOP 1 @ID_OPENSET=ID_OPENSET FROM #ID_OPENSETS ORDER BY ID_OPENSET ASC

			SET @MSG = 'GEN CLOSE ' + CAST(@ID_OPENSET AS VARCHAR(30)) + ' ' + CAST(@Cnt AS VARCHAR(30))
			RAISERROR('%s', 0, 1, @MSG) WITH NOWAIT

		EXEC SPX_STRAT_001.SPX.SP_CLOSESET_CREATE @ID_OPENSET, @Inc

		DELETE FROM #ID_OPENSETS WHERE ID_OPENSET=@ID_OPENSET

		SET @Cnt = @Cnt-1
	END
	
END


GO
/****** Object:  StoredProcedure [SPX].[SP_DEPLOY]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 052224
-- Description:	We manually deploy a strategy from here to UBU
-- =============================================
CREATE PROCEDURE [SPX].[SP_DEPLOY]

AS
BEGIN

	SET NOCOUNT ON;



	INSERT INTO UBU.OPT.VERT.STRATS
	SELECT TOP 1 ID_OPENSET, 'SPX_STRAT_001' Src, CP, W, EMX, EMX_PLUS, O, O_PLUS, SORT, T, TD, PT, ST, (ST-.0097-.10) RSK, 1 Cnt
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	CROSS JOIN SPX_VERT.SPX.STOPS S
	WHERE OP.ID_OPENSET = 4 AND S.ID_STOP = 2133

	SELECT TOP 1 * FROM SPX_STRAT_001.SPX.RES_IC_FULL ORDER BY W_Sharpe DESC


END
GO
/****** Object:  StoredProcedure [SPX].[SP_IC_CREATE_BATCH_FULL]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 06/26/2024
-- Description:	It creates a ton of double results efficiently (millions of IC strategy results per hour)
-- UPDATED: Now shows correct WL,LW based on O AND PT, Even more, I have eleminated PT > O
-- =============================================
CREATE PROCEDURE [SPX].[SP_IC_CREATE_BATCH_FULL]
@T TIME(0), @MinDate DATE
AS
BEGIN

	SET NOCOUNT ON;

	--DECLARE @T TIME(0) = '12:00'
	DECLARE @Fee DECIMAL(9,4) = .0097, @S_ID_OPENSET INT, @S_ID_STOP INT, @L_ID_OPENSET INT, @L_ID_STOP INT, @SCnt INT, @LCnt INT, @SLIP DECIMAL(9,2) = .10

	DROP TABLE IF EXISTS #D
	DROP TABLE IF EXISTS #SHORTS_0
	DROP TABLE IF EXISTS #LONGZS_0
	DROP TABLE IF EXISTS #COMBO
	DROP TABLE IF EXISTS #COMBO2
	DROP TABLE IF EXISTS #RES
	DROP TABLE IF EXISTS #MAIN_RES
	DROP TABLE IF EXISTS #WEEKLY
	DROP TABLE IF EXISTS #FINAL

	--SELECT TOP 10 * FROM SPX_STRAT_001.SPX.V_RES WHERE PT <= O AND ST <> 0 AND PT <> 0 AND ABS(ST)/PT < 4

	SELECT Expiry INTO #D FROM SPX_OPT.SPX.OPT GROUP BY Expiry

	DROP TABLE IF EXISTS #CNT
	DROP TABLE IF EXISTS #CNTS
	SELECT * INTO #CNT FROM SPX_STRAT_001.SPX.TF_GET_LISTS(1,3,1)
	SELECT CAST(A.V AS INT) SCnt, CAST(B.V AS INT) LCnt INTO #CNTS FROM #CNT A CROSS JOIN #CNT B WHERE A.V <> B.V OR (A.V=1 AND B.V=1)
	
	SELECT TOP 10000 ID_OPENSET, ID_STOP, W_Sharpe INTO #SHORTS_0 
	FROM SPX_STRAT_001.SPX.V_RES WHERE CP =  1 AND T = @T AND PT <= O+O_PLUS AND ST <> 0 AND PT <> 0
		AND (ABS(ST)/PT < 4 OR W_Sharpe > 10) AND ROR >.05 AND SORT = 1
		AND ID_OPENSET IN (SELECT ID_OPENSET FROM SPX_STRAT_001.SPX.OPEN_PARAMS WHERE MinDate = @MinDate)
	ORDER BY W_Sharpe DESC
	SELECT TOP 10000 ID_OPENSET, ID_STOP, W_Sharpe INTO #LONGZS_0 
	FROM SPX_STRAT_001.SPX.V_RES WHERE CP = -1 AND T = @T AND PT <= O+O_PLUS AND ST <> 0 AND PT <> 0
		AND (ABS(ST)/PT < 4 OR W_Sharpe > 10) AND ROR >.05 AND SORT = 1
		AND ID_OPENSET IN (SELECT ID_OPENSET FROM SPX_STRAT_001.SPX.OPEN_PARAMS WHERE MinDate = @MinDate)
	ORDER BY W_Sharpe DESC

	SELECT TOP 5000 S.ID_OPENSET S_ID_OPENSET, S.ID_STOP S_ID_STOP, L.ID_OPENSET L_ID_OPENSET, L.ID_STOP L_ID_STOP INTO #COMBO
	FROM #SHORTS_0 S CROSS JOIN #LONGZS_0 L
	LEFT JOIN SPX_STRAT_001.SPX.RES_IC_FULL Z ON Z.S_ID_OPENSET=S.ID_OPENSET AND Z.L_ID_OPENSET=L.ID_OPENSET AND Z.S_ID_STOP=S.ID_STOP AND Z.L_ID_STOP=L.ID_STOP
	WHERE Z.S_ID_OPENSET IS NULL
	ORDER BY S.W_Sharpe+L.W_Sharpe DESC

	SELECT * INTO #COMBO2 FROM #COMBO A	CROSS JOIN #D D CROSS JOIN #CNTS C

	SELECT A.*, S.*, L.* 
	INTO #RES 
	FROM #COMBO2 A
	OUTER APPLY (
		SELECT
			O.Expiry S_Expiry,
			(NetRes-IIF(CST=2,@SLIP,0)) SNetRes,
			(O.O-OP.W) SBP,
			(IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP) SRSK,
			S.PT SPT, S.ST SST, O.O SO
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
		WHERE OP.ID_OPENSET=S_ID_OPENSET AND CS.ID_STOP = S_ID_STOP AND O.Expiry=A.Expiry
	) S
	OUTER APPLY (
		SELECT
			O.Expiry L_Expiry,
			(NetRes-IIF(CST=2,@SLIP,0)) LNetRes,
			(O.O-OP.W) LBP,
			(IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP) LRSK,
			S.PT LPT, S.ST LST, O.O LO
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
		WHERE OP.ID_OPENSET=L_ID_OPENSET AND CS.ID_STOP = L_ID_STOP AND O.Expiry=A.Expiry
	) L
	WHERE S.S_Expiry=L.L_Expiry OR (S_Expiry IS NULL AND L_Expiry IS NOT NULL) OR (S_Expiry IS NOT NULL AND L_Expiry IS NULL)

	SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt,
		Expiry D,
		(ISNULL(SNetRes,0)*SCnt)+	(ISNULL(LNetRes,0)*LCnt) NetRes,
		(ISNULL(SBP,0)*SCnt) +		(ISNULL(LBP,0)*LCnt) BP,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) RSK,
		(ISNULL(IIF(SO>SPT, SPT, SO),0)*SCnt)+		(ISNULL(IIF(LO>LPT, LPT, LO),0)*LCnt) WW,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(IIF(LO>LPT, LPT, LO),0)*LCnt) LW,
		(ISNULL(IIF(SO>SPT, SPT, SO),0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) WL,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) LL
	INTO #MAIN_RES
	FROM #RES A

	SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe
	INTO #WEEKLY
	FROM (
		SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, DATEPART(WEEK, D) WK, SUM(NetRes) SumNetRes 
		FROM #MAIN_RES Z GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, DATEPART(WEEK, D)
	) W GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt


	INSERT INTO SPX_STRAT_001.SPX.RES_IC_FULL
	SELECT @T T, A.*, W.W_Sharpe, AvgRes/ABS(BP) ROBP, AvgRes/ABS(RSK) ROR
	FROM (
		SELECT
			S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt,
			CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
			SUM(NetRes) SumRes,
			AVG(NetRes) AvgRes,
			CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
			CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
			CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
			CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
			IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
			SUM(IIF(NetRes>0,1,0)) CntUp,
			COUNT(*) Cnt,
			AVG(BP) BP, MIN(RSK) RSK, AVG(WW) WW, AVG(LW) LW, AVG(WL) WL, AVG(LL) LL
		FROM #MAIN_RES Z GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt
	) A LEFT JOIN #WEEKLY W ON W.S_ID_OPENSET=A.S_ID_OPENSET AND W.L_ID_OPENSET=A.L_ID_OPENSET
		AND W.S_ID_STOP=A.S_ID_STOP AND W.L_ID_STOP=A.L_ID_STOP
		AND W.SCnt=A.SCnt AND W.LCnt=A.LCnt



END
GO
/****** Object:  StoredProcedure [SPX].[SP_IC_CREATE_BATCH_FULL_S_CUSTOM]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		BW
-- Create date: 06/26/2024
-- Description:	It creates a ton of double results efficiently --- with a specific short openset and stop.
-- UPDATED: Now shows correct WL,LW based on O AND PT, Even more, I have eleminated PT > O
-- =============================================
CREATE PROCEDURE [SPX].[SP_IC_CREATE_BATCH_FULL_S_CUSTOM]
@T TIME(0), @MinDate DATE, @S_ID_OPENSET INT, @S_ID_STOP INT
AS
BEGIN

	SET NOCOUNT ON;

	--DECLARE @T TIME(0) =  '12:00', @MinDate DATE = '2024-03-01', @S_ID_OPENSET INT = 33, @S_ID_STOP INT = 8375
	DECLARE @Fee DECIMAL(9,4) = .0097, @L_ID_OPENSET INT, @L_ID_STOP INT, @SCnt INT, @LCnt INT, @SLIP DECIMAL(9,2) = .10

	DROP TABLE IF EXISTS #D
	DROP TABLE IF EXISTS #SHORTS_0
	DROP TABLE IF EXISTS #LONGZS_0
	DROP TABLE IF EXISTS #COMBO
	DROP TABLE IF EXISTS #COMBO2
	DROP TABLE IF EXISTS #RES
	DROP TABLE IF EXISTS #MAIN_RES
	DROP TABLE IF EXISTS #WEEKLY
	DROP TABLE IF EXISTS #FINAL

	--SELECT TOP 10 * FROM SPX_STRAT_001.SPX.V_RES WHERE PT <= O AND ST <> 0 AND PT <> 0 AND ABS(ST)/PT < 4

	SELECT Expiry INTO #D FROM SPX_OPT.SPX.OPT GROUP BY Expiry

	DROP TABLE IF EXISTS #CNT
	DROP TABLE IF EXISTS #CNTS
	SELECT * INTO #CNT FROM SPX_STRAT_001.SPX.TF_GET_LISTS(1,3,1)
	SELECT CAST(A.V AS INT) SCnt, CAST(B.V AS INT) LCnt INTO #CNTS FROM #CNT A CROSS JOIN #CNT B WHERE A.V <> B.V OR (A.V=1 AND B.V=1)
	
	SELECT ID_OPENSET, ID_STOP, W_Sharpe INTO #SHORTS_0 
	FROM SPX_STRAT_001.SPX.V_RES WHERE CP =  1 AND ID_OPENSET = @S_ID_OPENSET AND ID_STOP = @S_ID_STOP
	ORDER BY W_Sharpe DESC
	SELECT TOP 50000 ID_OPENSET, ID_STOP, W_Sharpe INTO #LONGZS_0 
	FROM SPX_STRAT_001.SPX.V_RES WHERE CP = -1 AND T = @T AND PT <= O+O_PLUS
	ORDER BY W_Sharpe DESC

	SELECT TOP 5000 S.ID_OPENSET S_ID_OPENSET, S.ID_STOP S_ID_STOP, L.ID_OPENSET L_ID_OPENSET, L.ID_STOP L_ID_STOP INTO #COMBO
	FROM #SHORTS_0 S CROSS JOIN #LONGZS_0 L
	LEFT JOIN SPX_STRAT_001.SPX.RES_IC_FULL Z ON Z.S_ID_OPENSET=S.ID_OPENSET AND Z.L_ID_OPENSET=L.ID_OPENSET AND Z.S_ID_STOP=S.ID_STOP AND Z.L_ID_STOP=L.ID_STOP
	WHERE Z.S_ID_OPENSET IS NULL
	ORDER BY S.W_Sharpe+L.W_Sharpe DESC

	SELECT * INTO #COMBO2 FROM #COMBO A	CROSS JOIN #D D CROSS JOIN #CNTS C

	SELECT A.*, S.*, L.* 
	INTO #RES 
	FROM #COMBO2 A
	OUTER APPLY (
		SELECT
			O.Expiry S_Expiry,
			(NetRes-IIF(CST=2,@SLIP,0)) SNetRes,
			(O.O-OP.W) SBP,
			(IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP) SRSK,
			S.PT SPT, S.ST SST, O.O SO
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
		WHERE OP.ID_OPENSET=S_ID_OPENSET AND CS.ID_STOP = S_ID_STOP AND O.Expiry=A.Expiry
	) S
	OUTER APPLY (
		SELECT
			O.Expiry L_Expiry,
			(NetRes-IIF(CST=2,@SLIP,0)) LNetRes,
			(O.O-OP.W) LBP,
			(IIF(S.ST=0,O.O-OP.W,S.ST)-@Fee-@SLIP) LRSK,
			S.PT LPT, S.ST LST, O.O LO
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_STRAT_001.SPX.CLOSESETS CS ON CS.ID_OPEN=OS.ID_OPEN
		INNER JOIN SPX_VERT.SPX.STOPS S ON S.ID_STOP=CS.ID_STOP
		WHERE OP.ID_OPENSET=L_ID_OPENSET AND CS.ID_STOP = L_ID_STOP AND O.Expiry=A.Expiry
	) L
	WHERE S.S_Expiry=L.L_Expiry OR (S_Expiry IS NULL AND L_Expiry IS NOT NULL) OR (S_Expiry IS NOT NULL AND L_Expiry IS NULL)

	SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt,
		Expiry D,
		(ISNULL(SNetRes,0)*SCnt)+	(ISNULL(LNetRes,0)*LCnt) NetRes,
		(ISNULL(SBP,0)*SCnt) +		(ISNULL(LBP,0)*LCnt) BP,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) RSK,
		(ISNULL(IIF(SO>SPT, SPT, SO),0)*SCnt)+		(ISNULL(IIF(LO>LPT, LPT, LO),0)*LCnt) WW,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(IIF(LO>LPT, LPT, LO),0)*LCnt) LW,
		(ISNULL(IIF(SO>SPT, SPT, SO),0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) WL,
		(ISNULL(SRSK,0)*SCnt)+		(ISNULL(LRSK,0)*LCnt) LL
	INTO #MAIN_RES
	FROM #RES A

	SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe
	INTO #WEEKLY
	FROM (
		SELECT S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, DATEPART(WEEK, D) WK, SUM(NetRes) SumNetRes 
		FROM #MAIN_RES Z GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt, DATEPART(WEEK, D)
	) W GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt


	INSERT INTO SPX_STRAT_001.SPX.RES_IC_FULL
	SELECT @T T, A.*, W.W_Sharpe, AvgRes/ABS(BP) ROBP, AvgRes/ABS(RSK) ROR
	FROM (
		SELECT
			S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt,
			CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
			SUM(NetRes) SumRes,
			AVG(NetRes) AvgRes,
			CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
			CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
			CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
			CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
			IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
			SUM(IIF(NetRes>0,1,0)) CntUp,
			COUNT(*) Cnt,
			AVG(BP) BP, MIN(RSK) RSK, AVG(WW) WW, AVG(LW) LW, AVG(WL) WL, AVG(LL) LL
		FROM #MAIN_RES Z GROUP BY S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP, SCnt, LCnt
	) A LEFT JOIN #WEEKLY W ON W.S_ID_OPENSET=A.S_ID_OPENSET AND W.L_ID_OPENSET=A.L_ID_OPENSET
		AND W.S_ID_STOP=A.S_ID_STOP AND W.L_ID_STOP=A.L_ID_STOP
		AND W.SCnt=A.SCnt AND W.LCnt=A.LCnt



END
GO
/****** Object:  StoredProcedure [SPX].[SP_OPENSET_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	Efficient storage and reuse of OPENSETS
-- =============================================
CREATE PROCEDURE [SPX].[SP_OPENSET_CREATE]
@O DECIMAL(9,2), @O_PLUS DECIMAL(9,2), @EMX DECIMAL(9,2), @EMX_PLUS DECIMAL(9,2),
@CP INT, @W INT, @T TIME(0), @TD INT, @MinDate DATE, @SORT INT, @MaxAvailableDate DATE
AS
BEGIN
	SET NOCOUNT ON;

	--DECLARE 
	--	@O DECIMAL(9,2) = 1, @O_PLUS DECIMAL(9,2) = .5,
	--	@EMX DECIMAL(9,2) = 0, @EMX_PLUS DECIMAL(9,2) =  5,
	--	@CP INT=1, @W INT = 20, @SORT INT = 1,
	--	@T TIME(0) = '12:00', @TD INT = 15,
	--	@MinDate DATE = '2024-03-01'

	DECLARE	@ID_OPENSET INT, @CurrentMaxDateOfSet DATE
	
	--======== CHECK IF ALREADY EXITS, NO MATTER THE MaxDate
	SELECT @ID_OPENSET=ID_OPENSET FROM SPX_STRAT_001.SPX.OPEN_PARAMS 
	WHERE O=@O AND O_PLUS=@O_PLUS AND EMX=@EMX AND EMX_PLUS=@EMX_PLUS AND 
		CP=@CP AND W=@W AND T=@T AND TD=@TD AND MinDate=@MinDate AND SORT=@SORT

	IF @ID_OPENSET IS NULL
	BEGIN
		DROP TABLE IF EXISTS #VERTDATA_LOOKTIME
		DROP TABLE IF EXISTS #OPENZ

		--=== WE FIND THE NEAREST OPTION EVENT (GOING DOWN) TO EACH LOOK TIME
		SELECT * INTO #VERTDATA_LOOKTIME
		FROM SPX_STRAT_001.SPX.VERT_OPENS
		WHERE T BETWEEN @T AND DATEADD(MINUTE,@TD,@T)
			AND CP = @CP
			AND Expiry >= @MinDate
			AND W=@W
			AND O BETWEEN @O AND @O+@O_PLUS
			AND EMX BETWEEN @EMX AND @EMX+@EMX_PLUS
	
		SELECT SID, LID, SS, ER, O, Expiry, T INTO #OPENZ
		FROM (
			SELECT *, ROW_NUMBER() OVER(PARTITION BY P.Expiry ORDER BY T ASC,
						   CASE WHEN @SORT = 1 THEN O END ASC,
						   CASE WHEN @SORT = 2 THEN O END DESC,
						   CASE WHEN @SORT = 3 THEN ABS(O-(@O+(@O_PLUS/2))) END ASC, -- Mid Range Seeker
						   CASE WHEN @SORT = 4 THEN O*EMX END DESC,
						   CASE WHEN @SORT = 5 THEN O*EMX END ASC,
						   CASE WHEN @SORT = 6 THEN EMX END DESC,
						   CASE WHEN @SORT = 7 THEN EMX END ASC,
							SS DESC) Rn2
			FROM #VERTDATA_LOOKTIME P 
		) S WHERE RN2 = 1
		
		IF ((SELECT COUNT(*) FROM #OPENZ)>0)
		BEGIN

			INSERT INTO SPX_STRAT_001.SPX.OPEN_PARAMS (O, O_PLUS, EMX, EMX_PLUS, CP, W, T, TD, MinDate, MaxDate, Cnt, SORT)
			SELECT @O O, @O_PLUS O_PLUS, @EMX EMX, @EMX_PLUS EMX_PLUS, @CP CP, @W W, @T T, @TD TD, @MinDate MinDate,
				(SELECT MAX(Expiry) FROM #OPENZ) MaxDate,
				(SELECT COUNT(*) FROM #OPENZ) Cnt, @SORT SORT

			SELECT @ID_OPENSET=SCOPE_IDENTITY()

			INSERT INTO SPX_STRAT_001.SPX.OPENS (SID, LID, SS, ER, O, Expiry, T)
				SELECT A.SID, A.LID, A.SS, A.ER, A.O, A.Expiry, A.T FROM #OPENZ A
				LEFT JOIN SPX_STRAT_001.SPX.OPENS B ON B.SID=A.SID AND B.LID=A.LID AND B.T=A.T
				WHERE B.SID IS NULL

			INSERT INTO SPX_STRAT_001.SPX.OPENSETS
			SELECT Z.* FROM (
				SELECT B.ID_OPEN, @ID_OPENSET ID_OPENSET FROM #OPENZ A
				LEFT JOIN SPX_STRAT_001.SPX.OPENS B ON B.SID=A.SID AND B.LID=A.LID AND B.T=A.T
				WHERE B.SID IS NOT NULL
			) Z LEFT JOIN SPX_STRAT_001.SPX.OPENSETS X ON X.ID_OPEN=Z.ID_OPEN AND X.ID_OPENSET=Z.ID_OPENSET
			WHERE X.ID_OPEN IS NULL
		END
	END
	ELSE
	BEGIN
		EXEC SPX_STRAT_001.SPX.SP_OPENSET_UPDATE @ID_OPENSET
	END
END


GO
/****** Object:  StoredProcedure [SPX].[SP_OPENSET_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 2024-05-11
-- Description:	BATCH OUT THE OPENSETS
-- =============================================
CREATE PROCEDURE [SPX].[SP_OPENSET_CREATE_BATCH]
@T TIME(0), @TD INT, @CP INT, @W INT, @MinDate DATE
AS
BEGIN

	SET NOCOUNT ON;
	--DECLARE @CP INT = 1, @W INT = 10, @T TIME(0) = '11:50', @TD INT = 15, @MinDate DATE = '2024-03-01'

	DECLARE 
		@O DECIMAL(9,2) = .5, @O_PLUS DECIMAL(9,2) = 5,
		@EMX DECIMAL(9,2) = .2, @EMX_PLUS DECIMAL(9,2) = 5, 
		@SORT INT,
		@MaxAvailableDate DATE = (SELECT MAX(Expiry) FROM SPX_OPT.SPX.OPT)

	DROP TABLE IF EXISTS #O
	DROP TABLE IF EXISTS #O_PLUS
	DROP TABLE IF EXISTS #SORT
	DROP TABLE IF EXISTS #EMX

	SELECT V O INTO #O						FROM SPX_STRAT_001.SPX.TF_GET_LISTS(1,3,.10)
	SELECT V O_PLUS INTO #O_PLUS			FROM SPX_STRAT_001.SPX.TF_GET_LISTS(1,1,.50)
	SELECT CAST(V AS INT) SORT INTO #SORT	FROM SPX_STRAT_001.SPX.TF_GET_LISTS(1,10,1) WHERE V IN (1)
	SELECT V EMX INTO #EMX					FROM SPX_STRAT_001.SPX.TF_GET_LISTS(0,0,.05)

	DROP TABLE IF EXISTS #PARAMS
	SELECT O.O, OP.O_PLUS, S.SORT, E.EMX INTO #PARAMS FROM #O O
	CROSS JOIN #O_PLUS OP
	CROSS JOIN #SORT S
	CROSS JOIN #EMX E

	WHILE ((SELECT COUNT(*) FROM #PARAMS)>0)
	BEGIN
		SELECT TOP 1 @O=O, @O_PLUS=O_PLUS, @SORT=SORT, @EMX=EMX FROM #PARAMS

		EXEC SPX_STRAT_001.SPX.SP_OPENSET_CREATE @O, @O_PLUS, @EMX, @EMX_PLUS, @CP, @W, @T, @TD, @MinDate, @SORT, @MaxAvailableDate

		DELETE FROM #PARAMS WHERE @O=O AND @O_PLUS=O_PLUS AND @SORT=SORT AND @EMX=EMX
	END


END

GO
/****** Object:  StoredProcedure [SPX].[SP_OPENSET_UPDATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 052924
-- Description:	UPDATE SPECIFIC OPENSETS
-- =============================================
CREATE PROCEDURE [SPX].[SP_OPENSET_UPDATE]
@ID_OPENSET INT
AS
BEGIN
	SET NOCOUNT ON;

	--DECLARE @ID_OPENSET INT = 10

	DECLARE @O DECIMAL(9,2), @O_PLUS DECIMAL(9,2), @EMX DECIMAL(9,2), @EMX_PLUS DECIMAL(9,2),
	@CP INT, @W INT, @T TIME(0), @TD INT, @MinDate DATE, @SORT INT, @MaxDate DATE

	SELECT @O=O, @O_PLUS=O_PLUS, @EMX=EMX, @EMX_PLUS=EMX_PLUS, @CP=CP, @W=W, @T=T, @TD=TD, @MinDate=MinDate, @SORT=SORT, @MaxDate=MaxDate
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS WHERE ID_OPENSET=@ID_OPENSET

	IF @ID_OPENSET IS NOT NULL
	BEGIN
		DROP TABLE IF EXISTS #VERTDATA_LOOKTIME
		DROP TABLE IF EXISTS #OPENZ

		--=== WE FIND THE NEAREST OPTION EVENT (GOING DOWN) TO EACH LOOK TIME
		SELECT * INTO #VERTDATA_LOOKTIME
		FROM SPX_STRAT_001.SPX.VERT_OPENS
		WHERE T BETWEEN @T AND DATEADD(MINUTE,@TD,@T)
			AND CP = @CP
			AND Expiry >= @MinDate
			AND W=@W
			AND O BETWEEN @O AND @O+@O_PLUS
			AND EMX BETWEEN @EMX AND @EMX+@EMX_PLUS
	
		SELECT SID, LID, SS, ER, O, Expiry, T INTO #OPENZ
		FROM (
			SELECT *, ROW_NUMBER() OVER(PARTITION BY P.Expiry ORDER BY T ASC,
						   CASE WHEN @SORT = 1 THEN O END ASC,
						   CASE WHEN @SORT = 2 THEN O END DESC,
						   CASE WHEN @SORT = 3 THEN ABS(O-(@O+(@O_PLUS/2))) END ASC, -- Mid Range Seeker
						   CASE WHEN @SORT = 4 THEN O*EMX END DESC,
						   CASE WHEN @SORT = 5 THEN O*EMX END ASC,
						   CASE WHEN @SORT = 6 THEN EMX END DESC,
						   CASE WHEN @SORT = 7 THEN EMX END ASC,
							SS DESC) Rn2
			FROM #VERTDATA_LOOKTIME P 
		) S WHERE RN2 = 1


		INSERT INTO SPX_STRAT_001.SPX.OPENS (SID, LID, SS, ER, O, Expiry, T)
			SELECT A.SID, A.LID, A.SS, A.ER, A.O, A.Expiry, A.T FROM #OPENZ A
			LEFT JOIN SPX_STRAT_001.SPX.OPENS B ON B.SID=A.SID AND B.LID=A.LID AND B.T=A.T
			WHERE B.SID IS NULL

		INSERT INTO SPX_STRAT_001.SPX.OPENSETS
		SELECT Z.* FROM (
			SELECT B.ID_OPEN, @ID_OPENSET ID_OPENSET FROM #OPENZ A
			LEFT JOIN SPX_STRAT_001.SPX.OPENS B ON B.SID=A.SID AND B.LID=A.LID AND B.T=A.T
			WHERE B.SID IS NOT NULL
		) Z LEFT JOIN SPX_STRAT_001.SPX.OPENSETS X ON X.ID_OPEN=Z.ID_OPEN AND X.ID_OPENSET=Z.ID_OPENSET
		WHERE X.ID_OPEN IS NULL

		UPDATE OP SET OP.Cnt=A.Cnt, OP.MaxDate=A.MaxDate
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
		INNER JOIN (
			SELECT OS.ID_OPENSET, COUNT(*) Cnt, MAX(Expiry) MaxDate FROM SPX_STRAT_001.SPX.OPENSETS OS
			INNER JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
			WHERE OS.ID_OPENSET = @ID_OPENSET
			GROUP BY OS.ID_OPENSET
		) A ON A.ID_OPENSET=OP.ID_OPENSET

	END
END
GO
/****** Object:  StoredProcedure [SPX].[SP_PREP_VERT_OPENS]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 07/04/2024
-- Description:	Generates the VERTICAL OPENS that we are looking at.
-- EXEC SPX_STRAT_001.SPX.SP_PREP_VERT_OPENS '11:00', 20, 10, '2024-03-01'
-- =============================================
CREATE PROCEDURE [SPX].[SP_PREP_VERT_OPENS]
@T TIME(0), @TD INT, @W INT, @MinDate DATE
AS
BEGIN
	SET NOCOUNT ON;
	
	--DECLARE @T TIME(0) = '12:00', @TD INT = 20, @W INT = 10, @MinDate DATE = '2024-03-01'
	
	--========= VERIFY THE DATA DOES NOT HAVE DUPES
	--SELECT Expiry, T, CP, SID, LID, COUNT(*) Cnt FROM SPX_STRAT_001.SPX.VERT_OPENS GROUP BY Expiry, T, CP, SID, LID HAVING COUNT(*) > 1
	--========= SEE WHAT THE DATA HAS
	--SELECT W, MIN(T) T, DATEDIFF(MINUTE, MIN(T), MAX(T)) TD, MIN(Expiry) MinD, MAX(Expiry) MaxD FROM SPX_STRAT_001.SPX.VERT_OPENS GROUP BY W

	DECLARE	@ID_OPENSET INT, @MAX_DATE DATE, @LAST_DATA_DATE DATE, @MSG VARCHAR(MAX)

	SELECT @LAST_DATA_DATE=IIF( CAST(GETDATE() AS TIME(0)) >= '13:05', CAST(GETDATE() AS DATE), CAST(DATEADD(DAY,-1,GETDATE()) AS DATE))
	SELECT @MAX_DATE=MAX(Expiry) FROM SPX_STRAT_001.SPX.VERT_OPENS
	SELECT @MAX_DATE=IIF(@MAX_DATE IS NULL, @MinDate, @MAX_DATE)

	IF @MAX_DATE < @LAST_DATA_DATE
	BEGIN

		DROP TABLE IF EXISTS #T
		DROP TABLE IF EXISTS #VERTDATA
		DROP TABLE IF EXISTS #VERTDATA_UNIQUE
		DROP TABLE IF EXISTS #VERTDATA_UNIQUE_W_T
		DROP TABLE IF EXISTS #VERTDATA_LOOKTIME

		--=== WE GET ALL POSSIBLE TIMES SO WE CAN BUILD A LOOKTIME OF OPTION EVENTS THAT DO NOT HAPPEN EVERY SECOND
		SELECT T INTO #T FROM SPX_STRAT_001.SPX.TF_GET_ALLTIMES(@T, @TD)



		--=== WE GATHER THE VERTDATA
		SELECT * INTO #VERTDATA FROM SPX_VERT.SPX.VERT 
		WHERE T BETWEEN DATEADD(SECOND,-10,@T) AND DATEADD(MINUTE,@TD,@T)
				AND O BETWEEN .3 AND 5
				AND EMX BETWEEN 0 AND 5
				AND Expiry >= @MinDate
				AND W = @W
				AND Expiry >= @MAX_DATE

		--=== WE FIND THE UNIQUE OPTION OBJECTS
		SELECT SID, LID, CP INTO #VERTDATA_UNIQUE FROM #VERTDATA GROUP BY SID, LID, CP
		--=== WE COMBINE THE OPTION OBJECTS WITH THE LOOKTIMES
		SELECT * INTO #VERTDATA_UNIQUE_W_T FROM #T T CROSS JOIN #VERTDATA_UNIQUE VDU
		--=== WE FIND THE NEAREST OPTION EVENT (GOING DOWN) TO EACH LOOK TIME
		SELECT V.Expiry, T.T, V.CP, V.W, V.SID, V.LID, V.SS, V.LS, V.O, V.EMX, V.ER INTO #VERTDATA_LOOKTIME FROM #VERTDATA_UNIQUE_W_T T
		CROSS APPLY (SELECT TOP 1 * FROM #VERTDATA Z WHERE Z.T <= T.T AND Z.SID=T.SID AND Z.LID=T.LID AND Z.CP=T.CP ORDER BY Z.T DESC) V

		INSERT INTO SPX_STRAT_001.SPX.VERT_OPENS
		SELECT V.* FROM #VERTDATA_LOOKTIME V
		LEFT JOIN SPX_STRAT_001.SPX.VERT_OPENS O 
			ON V.Expiry=O.Expiry AND V.T=O.T AND V.CP=O.CP AND V.W=O.W AND V.SID=O.SID AND V.LID=O.LID AND V.O=O.O
		WHERE O.SID IS NULL

	--	SELECT Expiry, T, CP, W, SID, LID, SS, LS FROM SPX_STRAT_001.SPX.VERT_OPENS GROUP BY Expiry, T, CP, W, SID, LID, SS, LS HAVING COUNT(*) > 1
	
	END

END
GO
/****** Object:  StoredProcedure [SPX].[SP_REPORT_IC]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 05/20/2024
-- Description:	RETURNS A REPORT ON THE IC DOUBLE
-- =============================================
CREATE PROCEDURE [SPX].[SP_REPORT_IC]
@S_ID_OPENSET INT, @L_ID_OPENSET INT, @S_ID_STOP INT, @L_ID_STOP INT, @SCnt INT, @LCnt INT, @SLIPPAGE DECIMAL(9,2)
AS
BEGIN

	SET NOCOUNT ON;
	--DECLARE @S_ID_OPENSET INT = 215, @S_ID_STOP INT = 4235, @L_ID_OPENSET INT = 140, @L_ID_STOP INT = 4235, @SLIPPAGE DECIMAL(9,2) = .1, @SCnt INT = 1, @LCnt INT = 1
	DECLARE @Fee DECIMAL(9,4) = .0097

	DROP TABLE IF EXISTS #S
	DROP TABLE IF EXISTS #L


	SELECT * INTO #S FROM SPX_STRAT_001.SPX.TF_GET_CLOSESET(@S_ID_OPENSET,@S_ID_STOP,@SLIPPAGE)
	SELECT * INTO #L FROM SPX_STRAT_001.SPX.TF_GET_CLOSESET(@L_ID_OPENSET,@L_ID_STOP,@SLIPPAGE)

	SELECT 
		(ISNULL(S.BP,0)*@SCnt)+(ISNULL(L.BP,0)*@LCnt) BP,
		ISNULL(S.WK,L.WK) WK,
		ISNULL(S.Expiry, L.Expiry) D,
		(ISNULL(S.NetRes,0)*@SCnt) + (ISNULL(L.NetRes,0)*@LCnt) R
	FROM #S S
	FULL OUTER JOIN #L L ON L.Expiry=S.Expiry
	ORDER BY ISNULL(S.Expiry, L.Expiry) ASC

	SELECT *
	FROM #S S
	FULL OUTER JOIN #L L ON L.Expiry=S.Expiry
	ORDER BY ISNULL(S.Expiry, L.Expiry) ASC
END
GO
/****** Object:  StoredProcedure [SPX].[SP_REPORT_VERT]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 05/20/2024
-- Description:	RETURNS A REPORT ON THE IC DOUBLE
-- EXEC SPX_STRAT_001.SPX.SP_REPORT_VERT @ID_OPENSET, @ID_STOP, @SLIPPAGE, @Cnt
-- =============================================
CREATE PROCEDURE [SPX].[SP_REPORT_VERT]
@ID_OPENSET INT, @ID_STOP INT, @SLIPPAGE DECIMAL(9,2), @Cnt INT
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @Fee DECIMAL(9,4) = .0097
	DROP TABLE IF EXISTS #S
	SELECT * INTO #S FROM SPX_STRAT_001.SPX.TF_GET_CLOSESET(@ID_OPENSET,@ID_STOP,@SLIPPAGE)

	--SELECT Expiry D, NetRes*@Cnt NetRes	FROM #S ORDER BY Expiry ASC

	SELECT BP*@Cnt BP, WK, Expiry D, NetRes*@Cnt NetRes FROM #S ORDER BY Expiry ASC
	SELECT S.*, A.O FROM SPX_STRAT_001.SPX.TF_GET_OPENSET(@ID_OPENSET) A
	INNER JOIN #S S ON S.ID_OPEN=A.ID_OPEN
	ORDER BY S.Expiry ASC

END
GO
/****** Object:  StoredProcedure [SPX].[SP_RES_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	CREATES THE RES
-- =============================================
CREATE PROCEDURE [SPX].[SP_RES_CREATE]
@ID_OPENSET INT, @SLIP DECIMAL(9,2)
AS
BEGIN
	SET NOCOUNT ON;
	--DECLARE @ID_OPENSET INT = 1, @SLIP DECIMAL(9,2) = .1
	DECLARE @Fee DECIMAL(9,4) = .0097
		
	DROP TABLE IF EXISTS #CLOSESET
	DROP TABLE IF EXISTS #W_RETURNS
	DROP TABLE IF EXISTS #W_SUMMARY

	--========= GRAB THE CLOSE SET FOR THE GIVEN ID_OPENSET
	SELECT * INTO #CLOSESET FROM SPX_STRAT_001.SPX.TF_GET_CLOSESETS (@ID_OPENSET, @SLIP)

	--========= GRAB THE RESULTS FOR WEEKLY
	SELECT ID_STOP, WK, SUM(NetRes) AS SumNetRes INTO #W_RETURNS FROM #CLOSESET GROUP BY ID_STOP, WK
	--========= AGGREGATE THE WEEKLY RESULT BY ID_STOP
	SELECT ID_STOP, AVG(SumNetRes) W_AvgRes,
		CAST(STDEV(SumNetRes) AS DECIMAL(9,2)) W_Std,
		CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe,
		CAST(SUM(CASE WHEN SumNetRes > 0 THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL) AS DECIMAL(9,2)) W_WP,
		COUNT(*) W_Cnt
	INTO #W_SUMMARY
	FROM #W_RETURNS GROUP BY ID_STOP
	--========= INSERT THE FINAL COMBINED RESULT
BEGIN TRY
	INSERT INTO SPX_STRAT_001.SPX.RES
	SELECT CAST(GETDATE() AS DATETIME2(0)) ProcTime, @ID_OPENSET ID_OPENSET, A.ID_STOP, @SLIP SLIP,
		W.W_AvgRes, W.W_Std, W.W_WP, W.W_Cnt, W.W_Sharpe,
		A.Y_Sharpe, A.WP, A.BP, A.RSK,
		 AvgRes/ABS(BP) ROBP, AvgRes/ABS(RSK) ROR,
		A.SumRes, A.AvgRes, A.AvgUp, A.AvgDown, A.MaxUp, A.MaxDown,
		A.Cnt, A.Cnt_0, A.Cnt_1, A.Cnt_2, A.AvgDur
	FROM (
		SELECT
			ID_STOP,
			CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
			CAST((AVG(NetRes) - 0) / NULLIF(SQRT(AVG(POWER(IIF(NetRes < 0, NetRes, 0), 2))), 0) AS DECIMAL(20,2)) Sortino,
			SUM(NetRes) SumRes,
			AVG(NetRes) AvgRes,
			CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
			CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
			CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
			CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
			IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
			SUM(IIF(NetRes>0,1,0)) CntUp,
			COUNT(*) Cnt,
			SUM(IIF(CST=0,1,0)) Cnt_0,
			SUM(IIF(CST=1,1,0)) Cnt_1,
			SUM(IIF(CST=2,1,0)) Cnt_2,
			AVG(DUR) AvgDur, AVG(BP) BP, MIN(RSK) RSK
		FROM #CLOSESET Z GROUP BY ID_STOP
	) A LEFT JOIN #W_SUMMARY W ON W.ID_STOP=A.ID_STOP
END TRY
BEGIN CATCH
    -- Handle the error here
    PRINT 'An error occurred: ' + ERROR_MESSAGE();
    -- You can log the error to a table if needed
END CATCH;
END
GO
/****** Object:  StoredProcedure [SPX].[SP_RES_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 05-02-24
-- Description:	Runs all availble opensets (without misSPXg close) to fetch res data.
-- =============================================

CREATE PROCEDURE [SPX].[SP_RES_CREATE_BATCH]
@SLIP DECIMAL(9,2)
AS
BEGIN

	--======= NOTE: THE PROCEDURE WE ARE CALLING HAS NO LIMITER, WE MUST FILTER HERE.
	SET NOCOUNT ON;
	SET ANSI_WARNINGS OFF;
	--DECLARE @SLIP DECIMAL(9,2) = .10

	DROP TABLE IF EXISTS #OPEN_SETS

	--======= FIND ID_OPENSETS WITH ALL CLOSE DATA
	SELECT OP.ID_OPENSET, OP.MinDate, OP.MaxDate INTO #OPEN_SETS 
	FROM SPX_STRAT_001.SPX.OPEN_PARAMS OP
	LEFT JOIN SPX_STRAT_001.SPX.OPENSETS OS ON OS.ID_OPENSET=OP.ID_OPENSET
	LEFT JOIN SPX_STRAT_001.SPX.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	CROSS APPLY (SELECT COUNT(*) CCnt FROM SPX_STRAT_001.SPX.CLOSESETS CS WHERE CS.ID_OPEN=OS.ID_OPEN) CS
	GROUP BY OP.ID_OPENSET, OP.MinDate, OP.MaxDate
	HAVING (SUM(CCnt)/(8464)) = COUNT(O.ID_OPEN)

	--======= REMOVE EXISTING
	DELETE OS FROM #OPEN_SETS OS
	INNER JOIN SPX_STRAT_001.SPX.RES RS ON RS.ID_OPENSET=OS.ID_OPENSET AND CAST(RS.ProcTime AS DATE) <= DATEADD(DAY,2,CAST(GETDATE() AS DATE))

	DECLARE @ID_OPENSET INT, @MSG VARCHAR(MAX), @Cnt INT
	SELECT @Cnt=COUNT(*) FROM #OPEN_SETS
	WHILE ((SELECT COUNT(*) FROM #OPEN_SETS)>0)
	BEGIN
		SELECT TOP 1 @ID_OPENSET=ID_OPENSET FROM #OPEN_SETS ORDER BY ID_OPENSET ASC

			SET @MSG = 'GEN RES ' + CAST(@ID_OPENSET AS VARCHAR(30)) + ' ' + CAST(@Cnt AS VARCHAR(30))
			RAISERROR('%s', 0, 1, @MSG) WITH NOWAIT

		EXEC SPX_STRAT_001.SPX.SP_RES_CREATE @ID_OPENSET, @SLIP

		DELETE FROM #OPEN_SETS WHERE ID_OPENSET=@ID_OPENSET
		SET @Cnt = @Cnt-1
	END

END
GO
/****** Object:  StoredProcedure [SPX_IC].[SP_CLOSESET_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	Create Close Data - uSPXg OPENSET ID
-- EXEC SPX_STRAT_001.SPX.SP_CLOSESET_CREATE_OPENSET @ID_OPENSET, @Inc
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_CLOSESET_CREATE]
@IC_OPENSET INT
AS
BEGIN
	SET NOCOUNT ON;
	--======== WE ARE GOING ON THE ASSUMPTION THAT WE NEVER CHANGE THE STOP COUNT
	DROP TABLE IF EXISTS #OPENSET
	DROP TABLE IF EXISTS #CLOSEDATA
	DROP TABLE IF EXISTS #PT_HIT
	DROP TABLE IF EXISTS #ST_HIT
	DROP TABLE IF EXISTS #OS_STOP_COMBO
	DROP TABLE IF EXISTS #FINAL

	--DECLARE @IC_OPENSET INT = 134
	DECLARE @uSLIP DECIMAL(9,2) = .05, @Fee DECIMAL(9,4) = .0097

	--=== GRAB THE OPENSET
	SELECT * INTO #OPENSET FROM SPX_STRAT_001.SPX_IC.TF_GET_OPENSET(@IC_OPENSET)
	WHERE ID_OPEN NOT IN (SELECT ID_OPEN FROM SPX_STRAT_001.SPX_IC.CLOSESETS GROUP BY ID_OPEN HAVING COUNT(*) = 8464)

	--=== GRAB THE CLOSE DATA AND FORMAT IT
	SELECT O.ID_OPEN, LV.T CT, O.O-(LV.O+SV.O) CR INTO #CLOSEDATA 
	FROM #OPENSET O
	INNER JOIN SPX_VERT.SPX.VERT LV ON LV.SID=O.L_SID AND LV.LID=O.L_LID AND LV.T>O.T AND LV.T <= '13:00'
	INNER JOIN SPX_VERT.SPX.VERT SV ON SV.SID=O.S_SID AND SV.LID=O.S_LID AND SV.T>O.T AND SV.T <= '13:00' AND SV.T = LV.T
	WHERE LV.O > 0 AND LV.O < LV.W AND SV.O > 0 AND SV.O < SV.W

	--=== GRAB ANY PT HITS
	SELECT PT, ID_OPEN, CT, CR INTO #PT_HIT 
	FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY ID_OPEN, PT ORDER BY CT ASC) Rn
		FROM #CLOSEDATA CDS
		CROSS JOIN (SELECT DISTINCT PT FROM SPX_VERT.SPX.STOPS) S
		WHERE CDS.CR >= (S.PT+@uSLIP) AND S.PT <> 0
	) A WHERE RN = 1

	--=== GRAB ANY ST HITS
	SELECT ST, ID_OPEN, CT, CR INTO #ST_HIT FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY ID_OPEN, ST ORDER BY CT ASC) Rn
		FROM #CLOSEDATA CDS
		CROSS JOIN (SELECT DISTINCT ST FROM SPX_VERT.SPX.STOPS) S
		WHERE CDS.CR <= S.ST AND S.ST <> 0
	) A WHERE RN = 1

	--=== GRAB THE STOP*OPENSET
	SELECT ID_OPEN, ER, ID_STOP, PT, ST INTO #OS_STOP_COMBO FROM #OPENSET OS
	CROSS JOIN SPX_VERT.SPX.STOPS S

	--=== COMBINE THE PT and ST SETS AND EXPIRED RESULTS
	SELECT O.ID_STOP, O.ID_OPEN, 
		IIF(PT.PT IS NULL AND ST.ST IS NULL, '13:00',
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, PT.CT,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, ST.CT,
		IIF(PT.CT<ST.CT, PT.CT, ST.CT)))) CT,
		IIF(PT.PT IS NULL AND ST.ST IS NULL, IIF(ER>O.PT AND O.PT <> 0, O.PT, IIF(ER<O.ST AND O.ST <> 0, O.ST, ER)),
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, PT.PT,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, ST.ST,
		IIF(PT.CT<ST.CT, PT.PT, ST.ST)))) CR,
		IIF(PT.PT IS NULL AND ST.ST IS NULL, 0,
		IIF(PT.PT IS NOT NULL AND ST.ST IS NULL, 1,
		IIF(PT.PT IS NULL AND ST.ST IS NOT NULL, 2,
		IIF(PT.CT<ST.CT, 1, 2)))) CST
	INTO #FINAL
	FROM #OS_STOP_COMBO O
	LEFT JOIN #PT_HIT PT ON PT.ID_OPEN=O.ID_OPEN AND PT.PT=O.PT
	LEFT JOIN #ST_HIT ST ON ST.ID_OPEN=O.ID_OPEN AND ST.ST=O.ST

	--=== APPLY THE FEES AND INSERT INTO THE TABLE
	INSERT INTO SPX_STRAT_001.SPX_IC.CLOSESETS (ID_STOP, ID_OPEN, CT, CST, NetRes)
	SELECT A.* FROM
	(SELECT F.ID_STOP, F.ID_OPEN, F.CT, F.CST, CAST( F.CR-IIF(F.CST=0, (@Fee*2), IIF(F.CST=1, (@Fee*4), IIF(F.CST=2, (@Fee*4), (@Fee*2)))) AS DECIMAL(9,2)) NetRes FROM #FINAL F) A
	LEFT JOIN SPX_STRAT_001.SPX_IC.CLOSESETS CS ON CS.ID_STOP=A.ID_STOP AND CS.ID_OPEN=A.ID_OPEN AND CS.CT=A.CT AND CS.CST=A.CST AND CS.NetRes=A.NetRes
	WHERE CS.ID_STOP IS NULL

	--=== CLEAN UP BEFORE AND AFTER
	DROP TABLE IF EXISTS #OPENSET
	DROP TABLE IF EXISTS #CLOSEDATA
	DROP TABLE IF EXISTS #PT_HIT
	DROP TABLE IF EXISTS #ST_HIT
	DROP TABLE IF EXISTS #OS_STOP_COMBO
	DROP TABLE IF EXISTS #FINAL

END

GO
/****** Object:  StoredProcedure [SPX_IC].[SP_CLOSESET_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 05-02-24
-- Description:	Runs all availble opensets (with misSPXg close) to fetch close data.
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_CLOSESET_CREATE_BATCH]
@T TIME(0)
AS
BEGIN

	SET NOCOUNT ON;
	DECLARE @MSG VARCHAR(MAX), @Cnt INT, @IC_OPENSET INT
	--DECLARE @T TIME(0) = '11:00'

	--=============== THIS GRABS ANY IC_OPENSET THAT HAS NO OR PARTIAL CLOSEDATA
	DROP TABLE IF EXISTS #IC_OPENSETS
	SELECT OP.IC_OPENSET INTO #IC_OPENSETS
	FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS OP
	LEFT JOIN SPX_STRAT_001.SPX_IC.OPENSETS OS ON OS.IC_OPENSET=OP.IC_OPENSET
	LEFT JOIN SPX_STRAT_001.SPX_IC.OPENS O ON O.ID_OPEN=OS.ID_OPEN
	CROSS APPLY (SELECT COUNT(*) CCnt FROM SPX_STRAT_001.SPX_IC.CLOSESETS CS WHERE CS.ID_OPEN=OS.ID_OPEN) CS
	GROUP BY OP.IC_OPENSET
	HAVING (SUM(CCnt)/(8464)) < COUNT(O.ID_OPEN)

	SELECT @Cnt=COUNT(*) FROM #IC_OPENSETS
	WHILE ((SELECT COUNT(*) FROM #IC_OPENSETS)>0)
	BEGIN

		SELECT TOP 1 @IC_OPENSET=IC_OPENSET FROM #IC_OPENSETS ORDER BY IC_OPENSET ASC

			SET @MSG = 'GEN CLOSE ' + CAST(@IC_OPENSET AS VARCHAR(30)) + ' ' + CAST(@Cnt AS VARCHAR(30))
			RAISERROR('%s', 0, 1, @MSG) WITH NOWAIT

		EXEC SPX_STRAT_001.SPX_IC.SP_CLOSESET_CREATE @IC_OPENSET

		DELETE FROM #IC_OPENSETS WHERE IC_OPENSET=@IC_OPENSET

		SET @Cnt = @Cnt-1
	END
	
END


GO
/****** Object:  StoredProcedure [SPX_IC].[SP_OPENSET_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 05/02/24

-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_OPENSET_CREATE]
@IC_OPENSET INT
AS
BEGIN
	SET NOCOUNT ON;

	--DECLARE @IC_OPENSET INT = 1
	DROP TABLE IF EXISTS #OPENS
	SELECT A.IC_OPENSET, L_ID_OPENSET, S_ID_OPENSET,
		L_SID, L_LID, S_SID, S_LID,
		ISNULL(L_Expiry,S_Expiry) Expiry,
		IIF(ISNULL(L_T,'06:30')>ISNULL(S_T,'06:30'), L_T, S_T) T,
		ISNULL(L_ER,0)+ISNULL(S_ER,0) ER,
		ISNULL(L_O,0)+ISNULL(S_O,0) O
	INTO #OPENS
	FROM (
		SELECT IC_OPENSET, L_ID_OPENSET,
			SID L_SID, LID L_LID, ER L_ER, O L_O, Expiry L_Expiry, T L_T
		FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS IC
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS L_OS ON L_OS.ID_OPENSET=IC.L_ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS L_O ON L_O.ID_OPEN=L_OS.ID_OPEN
		WHERE IC_OPENSET=@IC_OPENSET
	) A INNER JOIN (
		SELECT IC_OPENSET, S_ID_OPENSET,
			SID S_SID, LID S_LID, ER S_ER, O S_O, Expiry S_Expiry, T S_T
		FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS IC
		INNER JOIN SPX_STRAT_001.SPX.OPENSETS S_OS ON S_OS.ID_OPENSET=IC.S_ID_OPENSET
		INNER JOIN SPX_STRAT_001.SPX.OPENS S_O ON S_O.ID_OPEN=S_OS.ID_OPEN
		WHERE IC_OPENSET=@IC_OPENSET
	) B ON B.S_Expiry=A.L_Expiry

	INSERT INTO SPX_STRAT_001.SPX_IC.OPENS (L_SID, L_LID, S_SID, S_LID, Expiry, T, ER, O)
	SELECT P.L_SID, P.L_LID, P.S_SID, P.S_LID, P.Expiry, P.T, P.ER, P.O
	FROM #OPENS P LEFT JOIN SPX_STRAT_001.SPX_IC.OPENS X ON X.L_SID=P.L_SID AND X.L_LID=P.L_LID AND X.S_SID=P.S_SID AND X.S_LID=P.S_LID AND X.T=P.T
	WHERE X.L_LID IS NULL

	INSERT INTO SPX_STRAT_001.SPX_IC.OPENSETS
	SELECT Z.* FROM (
		SELECT B.ID_OPEN, @IC_OPENSET IC_OPENSET FROM #OPENS A
		LEFT JOIN SPX_STRAT_001.SPX_IC.OPENS B ON B.L_SID=A.L_SID AND B.L_LID=A.L_LID AND B.S_SID=A.S_SID AND B.S_LID=A.S_LID AND B.T=A.T
		WHERE B.L_SID IS NOT NULL
	) Z LEFT JOIN SPX_STRAT_001.SPX_IC.OPENSETS X ON X.ID_OPEN=Z.ID_OPEN AND X.IC_OPENSET=Z.IC_OPENSET
	WHERE X.ID_OPEN IS NULL

END


GO
/****** Object:  StoredProcedure [SPX_IC].[SP_OPENSET_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 2024-05-11
-- Description:	BATCH OUT THE OPENSETS
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_OPENSET_CREATE_BATCH]

AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO SPX_STRAT_001.SPX_IC.OPEN_PARAMS (L_ID_OPENSET, S_ID_OPENSET)
	SELECT A.* FROM (
		SELECT L.ID_OPENSET L_ID_OPENSET, S.ID_OPENSET S_ID_OPENSET
		FROM SPX_STRAT_001.SPX.OPEN_PARAMS L
		CROSS JOIN SPX_STRAT_001.SPX.OPEN_PARAMS S
		WHERE L.CP = -1 AND S.CP = 1
	) A LEFT JOIN SPX_STRAT_001.SPX_IC.OPEN_PARAMS B ON B.L_ID_OPENSET=A.L_ID_OPENSET AND B.S_ID_OPENSET=A.S_ID_OPENSET
	WHERE B.L_ID_OPENSET IS NULL

	DECLARE @IC INT
	DROP TABLE IF EXISTS #IC
	SELECT IC_OPENSET INTO #IC FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS
	WHILE ((SELECT COUNT(*) FROM #IC)>0)
	BEGIN
		SELECT TOP 1 @IC=IC_OPENSET FROM #IC
		EXEC SPX_STRAT_001.SPX_IC.SP_OPENSET_CREATE @IC
		DELETE FROM #IC WHERE IC_OPENSET=@IC
	END

END

GO
/****** Object:  StoredProcedure [SPX_IC].[SP_REPORT_IC]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	SP_REPORT_IC
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_REPORT_IC]
@IC_OPENSET INT, @ID_STOP INT, @SLIP DECIMAL(9,2)
AS
BEGIN
	SET NOCOUNT ON;
	--DECLARE @IC_OPENSET INT = 117, @ID_STOP INT = 6719, @SLIP DECIMAL(9,2) = .05
	DECLARE @Fee DECIMAL(9,4) = .0097
		
	DROP TABLE IF EXISTS #CLOSESET
	DROP TABLE IF EXISTS #W_RETURNS
	DROP TABLE IF EXISTS #W_SUMMARY

	--========= GRAB THE CLOSE SET FOR THE GIVEN IC_OPENSET
	SELECT * INTO #CLOSESET FROM SPX_STRAT_001.SPX_IC.TF_GET_CLOSESETS (@IC_OPENSET, @SLIP) WHERE ID_STOP = @ID_STOP
	SELECT * FROM SPX_VERT.SPX.STOPS WHERE ID_STOP= @ID_STOP
	SELECT OP.* FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS IC
	INNER JOIN SPX_STRAT_001.SPX.OPEN_PARAMS OP ON OP.ID_OPENSET = IC.L_ID_OPENSET OR OP.ID_OPENSET = IC.S_ID_OPENSET
	WHERE IC_OPENSET=@IC_OPENSET
	SELECT BP, WK, Expiry, NetRes FROM #CLOSESET ORDER BY Expiry ASC
	
	--========= GRAB THE RESULTS FOR WEEKLY
	SELECT ID_STOP, WK, SUM(NetRes) AS SumNetRes INTO #W_RETURNS FROM #CLOSESET GROUP BY ID_STOP, WK
	--========= AGGREGATE THE WEEKLY RESULT BY ID_STOP
	SELECT ID_STOP, AVG(SumNetRes) W_AvgRes,
		CAST(STDEV(SumNetRes) AS DECIMAL(9,2)) W_Std,
		CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe,
		CAST(SUM(CASE WHEN SumNetRes > 0 THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL) AS DECIMAL(9,2)) W_WP,
		COUNT(*) W_Cnt
	INTO #W_SUMMARY
	FROM #W_RETURNS GROUP BY ID_STOP
	--========= INSERT THE FINAL COMBINED RESULT

	SELECT CAST(GETDATE() AS DATETIME2(0)) ProcTime, @IC_OPENSET IC_OPENSET, A.ID_STOP, @SLIP SLIP,
		W.W_AvgRes, W.W_Std, W.W_WP, W.W_Cnt, W.W_Sharpe,
		A.Y_Sharpe, A.WP, A.BP, A.RSK,
		 AvgRes/ABS(BP) ROBP, AvgRes/ABS(RSK) ROR,
		A.SumRes, A.AvgRes, A.AvgUp, A.AvgDown, A.MaxUp, A.MaxDown,
		A.Cnt, A.Cnt_0, A.Cnt_1, A.Cnt_2, A.AvgDur
	FROM (
		SELECT
			ID_STOP,
			CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
			CAST((AVG(NetRes) - 0) / NULLIF(SQRT(AVG(POWER(IIF(NetRes < 0, NetRes, 0), 2))), 0) AS DECIMAL(20,2)) Sortino,
			SUM(NetRes) SumRes,
			AVG(NetRes) AvgRes,
			CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
			CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
			CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
			CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
			IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
			SUM(IIF(NetRes>0,1,0)) CntUp,
			COUNT(*) Cnt,
			SUM(IIF(CST=0,1,0)) Cnt_0,
			SUM(IIF(CST=1,1,0)) Cnt_1,
			SUM(IIF(CST=2,1,0)) Cnt_2,
			AVG(DUR) AvgDur, AVG(BP) BP, MIN(RSK) RSK
		FROM #CLOSESET Z GROUP BY ID_STOP
	) A LEFT JOIN #W_SUMMARY W ON W.ID_STOP=A.ID_STOP

END
GO
/****** Object:  StoredProcedure [SPX_IC].[SP_RES_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	CREATES THE RES
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_RES_CREATE]
@IC_OPENSET INT, @SLIP DECIMAL(9,2)
AS
BEGIN
	SET NOCOUNT ON;
	--DECLARE @IC_OPENSET INT = 1, @SLIP DECIMAL(9,2) = .1
	DECLARE @Fee DECIMAL(9,4) = .0097
		
	DROP TABLE IF EXISTS #CLOSESET
	DROP TABLE IF EXISTS #W_RETURNS
	DROP TABLE IF EXISTS #W_SUMMARY

	--========= GRAB THE CLOSE SET FOR THE GIVEN IC_OPENSET
	SELECT * INTO #CLOSESET FROM SPX_STRAT_001.SPX_IC.TF_GET_CLOSESETS (@IC_OPENSET, @SLIP)

	--========= GRAB THE RESULTS FOR WEEKLY
	SELECT ID_STOP, WK, SUM(NetRes) AS SumNetRes INTO #W_RETURNS FROM #CLOSESET GROUP BY ID_STOP, WK
	--========= AGGREGATE THE WEEKLY RESULT BY ID_STOP
	SELECT ID_STOP, AVG(SumNetRes) W_AvgRes,
		CAST(STDEV(SumNetRes) AS DECIMAL(9,2)) W_Std,
		CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe,
		CAST(SUM(CASE WHEN SumNetRes > 0 THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL) AS DECIMAL(9,2)) W_WP,
		COUNT(*) W_Cnt
	INTO #W_SUMMARY
	FROM #W_RETURNS GROUP BY ID_STOP
	--========= INSERT THE FINAL COMBINED RESULT
BEGIN TRY
	INSERT INTO SPX_STRAT_001.SPX_IC.RES
	SELECT CAST(GETDATE() AS DATETIME2(0)) ProcTime, @IC_OPENSET IC_OPENSET, A.ID_STOP, @SLIP SLIP,
		W.W_AvgRes, W.W_Std, W.W_WP, W.W_Cnt, W.W_Sharpe,
		A.Y_Sharpe, A.WP, A.BP, A.RSK,
		 AvgRes/ABS(BP) ROBP, AvgRes/ABS(RSK) ROR,
		A.SumRes, A.AvgRes, A.AvgUp, A.AvgDown, A.MaxUp, A.MaxDown,
		A.Cnt, A.Cnt_0, A.Cnt_1, A.Cnt_2, A.AvgDur
	FROM (
		SELECT
			ID_STOP,
			CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
			CAST((AVG(NetRes) - 0) / NULLIF(SQRT(AVG(POWER(IIF(NetRes < 0, NetRes, 0), 2))), 0) AS DECIMAL(20,2)) Sortino,
			SUM(NetRes) SumRes,
			AVG(NetRes) AvgRes,
			CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
			CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
			CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
			CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
			IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
			SUM(IIF(NetRes>0,1,0)) CntUp,
			COUNT(*) Cnt,
			SUM(IIF(CST=0,1,0)) Cnt_0,
			SUM(IIF(CST=1,1,0)) Cnt_1,
			SUM(IIF(CST=2,1,0)) Cnt_2,
			AVG(DUR) AvgDur, AVG(BP) BP, MIN(RSK) RSK
		FROM #CLOSESET Z GROUP BY ID_STOP
	) A LEFT JOIN #W_SUMMARY W ON W.ID_STOP=A.ID_STOP
END TRY
BEGIN CATCH
    -- Handle the error here
    PRINT 'An error occurred: ' + ERROR_MESSAGE();
    -- You can log the error to a table if needed
END CATCH;
END
GO
/****** Object:  StoredProcedure [SPX_IC].[SP_RES_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	CREATES THE RES
-- =============================================
CREATE PROCEDURE [SPX_IC].[SP_RES_CREATE_BATCH]
AS
BEGIN
	SET NOCOUNT ON;
	DROP TABLE IF EXISTS #ICS
	SELECT IC_OPENSET INTO #ICS FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS A
	LEFT JOIN SPX_STRAT_001.SPX_IC.RES Z ON Z.ID_OPENSET=A.IC_OPENSET
	WHERE ID_OPENSET IS NULL


	DECLARE @IC_OPENSET INT, @MSG VARCHAR(MAX), @Cnt INT
	SELECT @Cnt=COUNT(*) FROM #ICS
	WHILE ((SELECT COUNT(*) FROM #ICS)>0)
	BEGIN

		SELECT TOP 1 @IC_OPENSET=IC_OPENSET FROM #ICS ORDER BY IC_OPENSET ASC
			SET @MSG = 'GEN RES ' + CAST(@IC_OPENSET AS VARCHAR(30)) + ' ' + CAST(@Cnt AS VARCHAR(30))
			RAISERROR('%s', 0, 1, @MSG) WITH NOWAIT
		EXEC SPX_STRAT_001.SPX_IC.SP_RES_CREATE @IC_OPENSET, .05
		DELETE FROM #ICS WHERE IC_OPENSET=@IC_OPENSET
		SET @Cnt = @Cnt-1
	END
END
GO
/****** Object:  StoredProcedure [SPX_IC_I].[SP_REPORT_IC]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	SP_REPORT_IC
-- =============================================
CREATE PROCEDURE [SPX_IC_I].[SP_REPORT_IC]
@IC_OPENSET INT, @IC_ID_STOP INT, @L_ID_STOP INT, @S_ID_STOP INT
AS
BEGIN
	SET NOCOUNT ON;
	--===== THIS STARTS WITH THE EXISTING IC_FULL combo.
	--SELECT TOP 1 * FROM SPX_STRAT_001.SPX_IC_I.RES A ORDER BY W_Sharpe DESC
	--DECLARE @IC_OPENSET INT = 160, @IC_ID_STOP INT = 8375, @S_ID_STOP INT = 759, @L_ID_STOP INT = 1490
	DECLARE @S_ID_OPENSET INT, @L_ID_OPENSET INT
	DECLARE  @uSLIP DECIMAL(9,2) = .05, @SLIP DECIMAL(9,2) = .05, @Fee DECIMAL(9,4) = .0097
	
	--=== GETT THE IC THAT MATCHES THE L AND S
	SELECT @L_ID_OPENSET=L_ID_OPENSET, @S_ID_OPENSET=S_ID_OPENSET FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS	WHERE @IC_OPENSET=IC_OPENSET
	SELECT @L_ID_OPENSET L_ID_OPENSET, @S_ID_OPENSET S_ID_OPENSET
	DROP TABLE IF EXISTS #VERTRESULTS
	DROP TABLE IF EXISTS #RES
	DROP TABLE IF EXISTS #W_RETURNS
	DROP TABLE IF EXISTS #W_SUMMARY

	--=== GET THE L AND S
	SELECT ISNULL(L.Expiry, S.Expiry) Expiry,
		ISNULL(L.NetRes,0)+ISNULL(S.NetRes,0) NetRes,
		IIF(L.CT<S.CT, L.CT, S.CT) CT
	INTO #VERTRESULTS
	FROM SPX_STRAT_001.SPX.TF_GET_CLOSESETS(@L_ID_OPENSET, @SLIP) L
	INNER JOIN SPX_STRAT_001.SPX.TF_GET_CLOSESETS(@S_ID_OPENSET, @SLIP) S ON S.Expiry=L.Expiry
	WHERE L.ID_STOP = @L_ID_STOP AND S.ID_STOP = @S_ID_STOP

	--=== GET THE IC
	SELECT IC.ID_STOP,
		DATEPART(WEEK, IC.Expiry) WK, IC.Expiry,
		IIF(IC.CT<V.CT, IC.CT, V.CT) CT, 
		IIF(IC.CT<V.CT, IC.NetRes, V.NetRes) NetRes
	INTO #RES
	FROM SPX_STRAT_001.SPX_IC.TF_GET_CLOSESETS(@IC_OPENSET, .05) IC
	INNER JOIN #VERTRESULTS V ON V.Expiry=IC.Expiry
	WHERE ID_STOP = @IC_ID_STOP

	--SELECT * FROM #VERTRESULTS ORDER BY Expiry

	SELECT * FROM SPX_VERT.SPX.STOPS WHERE ID_STOP= @IC_ID_STOP

	SELECT * FROM SPX_VERT.SPX.STOPS WHERE ID_STOP IN (@S_ID_STOP, @L_ID_STOP)

	SELECT OP.* FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS IC
	INNER JOIN SPX_STRAT_001.SPX.OPEN_PARAMS OP ON OP.ID_OPENSET = IC.L_ID_OPENSET OR OP.ID_OPENSET = IC.S_ID_OPENSET
	WHERE IC_OPENSET=@IC_OPENSET

	SELECT -100 BP, WK, Expiry D, NetRes FROM #RES ORDER BY Expiry ASC

	--========= GRAB THE RESULTS FOR WEEKLY
	SELECT ID_STOP, WK, SUM(NetRes) AS SumNetRes INTO #W_RETURNS FROM #RES GROUP BY WK, ID_STOP
	--========= AGGREGATE THE WEEKLY RESULT BY ID_STOP
	SELECT ID_STOP, AVG(SumNetRes) W_AvgRes,
		CAST(STDEV(SumNetRes) AS DECIMAL(9,2)) W_Std,
		CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe,
		CAST(SUM(CASE WHEN SumNetRes > 0 THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL) AS DECIMAL(9,2)) W_WP,
		COUNT(*) W_Cnt
	INTO #W_SUMMARY
	FROM #W_RETURNS GROUP BY ID_STOP


		SELECT CAST(GETDATE() AS DATETIME2(0)) ProcTime, @IC_OPENSET IC_OPENSET, @SLIP SLIP, IC_ID_STOP, @L_ID_STOP L_ID_STOP, @S_ID_STOP S_ID_STOP,
			W.W_AvgRes, W.W_Std, W.W_WP, W.W_Cnt, W.W_Sharpe,
			A.Y_Sharpe, A.WP,
			A.SumRes, A.AvgRes, A.AvgUp, A.AvgDown, A.MaxUp, A.MaxDown,
			A.Cnt
		FROM (
			SELECT
				CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
				CAST((AVG(NetRes) - 0) / NULLIF(SQRT(AVG(POWER(IIF(NetRes < 0, NetRes, 0), 2))), 0) AS DECIMAL(20,2)) Sortino,
				SUM(NetRes) SumRes,
				AVG(NetRes) AvgRes,
				CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
				CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
				CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
				CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
				IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
				SUM(IIF(NetRes>0,1,0)) CntUp,
				COUNT(*) Cnt,
				ID_STOP IC_ID_STOP
			FROM #RES Z GROUP BY ID_STOP
		) A LEFT JOIN #W_SUMMARY W ON W.ID_STOP=A.IC_ID_STOP

END
GO
/****** Object:  StoredProcedure [SPX_IC_I].[SP_RES_CREATE]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	CREATES THE RES
-- =============================================
CREATE PROCEDURE [SPX_IC_I].[SP_RES_CREATE]
@S_ID_OPENSET INT, @L_ID_OPENSET INT, @S_ID_STOP INT, @L_ID_STOP INT
AS
BEGIN
	SET NOCOUNT ON;
	--===== THIS STARTS WITH THE EXISTING IC_FULL combo.
	--DECLARE @S_ID_OPENSET INT = 50, @L_ID_OPENSET INT = 4, @L_ID_STOP INT = 2133, @S_ID_STOP INT = 2698
	DECLARE @IC_OPENSET INT, @uSLIP DECIMAL(9,2) = .05, @SLIP DECIMAL(9,2) = .05, @Fee DECIMAL(9,4) = .0097

	--=== GETT THE IC THAT MATCHES THE L AND S
	SELECT @IC_OPENSET=IC_OPENSET FROM SPX_STRAT_001.SPX_IC.OPEN_PARAMS
	WHERE L_ID_OPENSET=@L_ID_OPENSET AND S_ID_OPENSET=@S_ID_OPENSET

	DROP TABLE IF EXISTS #VERTRESULTS
	DROP TABLE IF EXISTS #RES
	DROP TABLE IF EXISTS #W_RETURNS
	DROP TABLE IF EXISTS #W_SUMMARY

	--=== GET THE L AND S
	SELECT ISNULL(L.Expiry, S.Expiry) Expiry, ISNULL(L.NetRes,0)+ISNULL(S.NetRes,0) NetRes, IIF(L.CT<S.CT, L.CT, S.CT) CT
	INTO #VERTRESULTS
	FROM SPX_STRAT_001.SPX.TF_GET_CLOSESETS(@L_ID_OPENSET, @SLIP) L
	INNER JOIN SPX_STRAT_001.SPX.TF_GET_CLOSESETS(@S_ID_OPENSET, @SLIP) S ON S.Expiry=L.Expiry
	WHERE L.ID_STOP = @L_ID_STOP AND S.ID_STOP = @S_ID_STOP

	--=== GET THE IC
	SELECT IC.ID_STOP,
		DATEPART(WEEK, IC.Expiry) WK, IC.Expiry,
		IIF(IC.CT<V.CT, IC.CT, V.CT) CT, 
		IIF(IC.CT<V.CT, IC.NetRes, V.NetRes) NetRes
	INTO #RES
	FROM SPX_STRAT_001.SPX_IC.TF_GET_CLOSESETS(@IC_OPENSET, .05) IC
	INNER JOIN #VERTRESULTS V ON V.Expiry=IC.Expiry
	WHERE ID_STOP IN (SELECT ID_STOP FROM SPX_VERT.SPX.STOPS WHERE ST = 0)

	--SELECT -100 BP, WK, Expiry D, NetRes FROM #RES ORDER BY Expiry ASC

	--========= GRAB THE RESULTS FOR WEEKLY
	SELECT ID_STOP, WK, SUM(NetRes) AS SumNetRes INTO #W_RETURNS FROM #RES GROUP BY WK, ID_STOP
	--========= AGGREGATE THE WEEKLY RESULT BY ID_STOP
	SELECT ID_STOP, AVG(SumNetRes) W_AvgRes,
		CAST(STDEV(SumNetRes) AS DECIMAL(9,2)) W_Std,
		CAST(SQRT(52)*(AVG(SumNetRes)/NULLIF(STDEV(SumNetRes),0)) AS DECIMAL(9,2)) W_Sharpe,
		CAST(SUM(CASE WHEN SumNetRes > 0 THEN 1 ELSE 0 END) / CAST(COUNT(*) AS REAL) AS DECIMAL(9,2)) W_WP,
		COUNT(*) W_Cnt
	INTO #W_SUMMARY
	FROM #W_RETURNS GROUP BY ID_STOP

	BEGIN TRY
		INSERT INTO SPX_STRAT_001.SPX_IC_I.RES
		SELECT CAST(GETDATE() AS DATETIME2(0)) ProcTime, @IC_OPENSET IC_OPENSET, @SLIP SLIP, IC_ID_STOP, @L_ID_STOP L_ID_STOP, @S_ID_STOP S_ID_STOP,
			W.W_AvgRes, W.W_Std, W.W_WP, W.W_Cnt, W.W_Sharpe,
			A.Y_Sharpe, A.WP,
			A.SumRes, A.AvgRes, A.AvgUp, A.AvgDown, A.MaxUp, A.MaxDown,
			A.Cnt
		FROM (
			SELECT
				CAST(SQRT(252)*(AVG(NetRes)/NULLIF(STDEV(NetRes),0)) AS DECIMAL(20,2)) Y_Sharpe,
				CAST((AVG(NetRes) - 0) / NULLIF(SQRT(AVG(POWER(IIF(NetRes < 0, NetRes, 0), 2))), 0) AS DECIMAL(20,2)) Sortino,
				SUM(NetRes) SumRes,
				AVG(NetRes) AvgRes,
				CAST(ISNULL(AVG(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgUp,
				CAST(ISNULL(AVG(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) AvgDown,
				CAST(ISNULL(MAX(IIF(NetRes>0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxUp,
				CAST(ISNULL(MIN(IIF(NetRes<0,NetRes,NULL)),0) AS DECIMAL(20,2)) MaxDown,
				IIF(COUNT(*) IS NULL OR COUNT(*) = 0, NULL, CAST( SUM(IIF(NetRes>0,1,0))/CAST(NULLIF(COUNT(*),0) AS REAL) AS DECIMAL(20,3))) WP,
				SUM(IIF(NetRes>0,1,0)) CntUp,
				COUNT(*) Cnt,
				ID_STOP IC_ID_STOP
			FROM #RES Z GROUP BY ID_STOP
		) A LEFT JOIN #W_SUMMARY W ON W.ID_STOP=A.IC_ID_STOP
	END TRY
	BEGIN CATCH
		-- Handle the error here
		PRINT 'An error occurred: ' + ERROR_MESSAGE();
		-- You can log the error to a table if needed
	END CATCH;
END
GO
/****** Object:  StoredProcedure [SPX_IC_I].[SP_RES_CREATE_BATCH]    Script Date: 8/2/2024 12:21:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		BW
-- Create date: 07/06/24
-- Description:	CREATES THE RES
-- =============================================
CREATE PROCEDURE [SPX_IC_I].[SP_RES_CREATE_BATCH]

AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @IC_OPENSET INT
	DECLARE @SLIP DECIMAL(9,2) = .05, @S_ID_OPENSET INT, @L_ID_OPENSET INT, @L_ID_STOP INT, @S_ID_STOP INT, @MSG VARCHAR(MAX), @Cnt INT

	DROP TABLE IF EXISTS #IC_FULL
	DROP TABLE IF EXISTS #IC_PURE
	DROP TABLE IF EXISTS #IC_COMBO

	SELECT TOP 10000 S_ID_OPENSET, L_ID_OPENSET, S_ID_STOP, L_ID_STOP INTO #IC_FULL FROM SPX_STRAT_001.SPX.RES_IC_FULL WHERE LCnt=SCnt ORDER BY W_Sharpe DESC

	DELETE A FROM #IC_FULL A
	LEFT JOIN (
		SELECT OP.*, R.S_ID_STOP, R.L_ID_STOP FROM SPX_STRAT_001.SPX_IC_I.RES R 
		INNER JOIN SPX_STRAT_001.SPX_IC.OPEN_PARAMS OP ON OP.IC_OPENSET=R.IC_OPENSET
	) B ON A.L_ID_OPENSET=B.L_ID_OPENSET AND A.S_ID_OPENSET=B.S_ID_OPENSET AND A.S_ID_STOP=B.S_ID_STOP AND A.L_ID_STOP=B.L_ID_STOP
	WHERE B.L_ID_OPENSET IS NOT NULL


	SELECT @Cnt=COUNT(*) FROM #IC_FULL

	WHILE ((SELECT COUNT(*) FROM #IC_FULL)>0)
	BEGIN
		SELECT TOP 1 @S_ID_OPENSET=S_ID_OPENSET, @L_ID_OPENSET=L_ID_OPENSET, @L_ID_STOP=L_ID_STOP, @S_ID_STOP=S_ID_STOP FROM #IC_FULL
			SET @MSG = 'GEN RES ' + CAST(@Cnt AS VARCHAR(30))
			RAISERROR('%s', 0, 1, @MSG) WITH NOWAIT
		EXEC SPX_STRAT_001.SPX_IC_I.SP_RES_CREATE @S_ID_OPENSET, @L_ID_OPENSET, @S_ID_STOP, @L_ID_STOP
		DELETE FROM #IC_FULL WHERE @S_ID_OPENSET=S_ID_OPENSET AND @L_ID_OPENSET=L_ID_OPENSET AND @L_ID_STOP=L_ID_STOP AND @S_ID_STOP=S_ID_STOP
		SET @Cnt=@Cnt-1
	END


END
GO
