USE [SPX_VERT]
GO
/****** Object:  Schema [SPX]    Script Date: 8/2/2024 12:26:03 PM ******/
CREATE SCHEMA [SPX]
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_ALLTIMES]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [SPX].[TF_GET_ALLTIMES]
(
    @T TIME(0),
    @TD INT
)
RETURNS @TimeRange TABLE 
(
    T TIME(0)
)
AS
BEGIN
    DECLARE 
        @MINT TIME(0) = @T,
        @MAXT TIME(0) = DATEADD(MINUTE, @TD, @T)

    -- Insert the initial time
    INSERT INTO @TimeRange (T) VALUES (@MINT)

    -- Loop through and insert every second until the END OF TIME!
    WHILE @MINT < @MAXT
    BEGIN
        SET @MINT = DATEADD(SECOND, 1, @MINT)
        INSERT INTO @TimeRange (T)
        VALUES (@MINT)
    END

    RETURN
END
GO
/****** Object:  UserDefinedFunction [SPX].[TF_GET_LISTS]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Description:	Returns a list of values
-- =============================================
CREATE FUNCTION [SPX].[TF_GET_LISTS]
(
	@Min DECIMAL(9,2), @Max DECIMAL(9,2), @Inc DECIMAL(9,2)
)
RETURNS 
@Ret TABLE ( V DECIMAL(9,2) )
AS
BEGIN

	WHILE @Min <= @Max
	BEGIN
		INSERT INTO @Ret SELECT @Min V
		SET @Min = @Min + @Inc
	END
	
	RETURN 
END
GO
/****** Object:  Table [SPX].[VERT]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[VERT](
	[Expiry] [date] NOT NULL,
	[T] [time](0) NOT NULL,
	[CP] [smallint] NOT NULL,
	[W] [smallint] NOT NULL,
	[SID] [int] NOT NULL,
	[LID] [int] NOT NULL,
	[SS] [smallint] NOT NULL,
	[LS] [smallint] NOT NULL,
	[O] [numeric](9, 2) NOT NULL,
	[EMX] [decimal](9, 2) NOT NULL,
	[ER] [numeric](9, 2) NOT NULL,
 CONSTRAINT [PK_VERT] PRIMARY KEY CLUSTERED 
(
	[Expiry] ASC,
	[T] ASC,
	[SID] ASC,
	[LID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [SPX].[TF_OPTWEB_GET_VERT_CHART]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [SPX].[TF_OPTWEB_GET_VERT_CHART]
(	
@SID INT, @LID INT, @T TIME(0), @O DECIMAL(9,2)
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT T, @O-O Res FROM SPX_VERT.SPX.VERT V
	WHERE V.SID=@SID AND V.LID=@LID AND V.T>=@T
)
GO
/****** Object:  UserDefinedFunction [SPX].[TF_OPTWEB_GET_VERTS]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [SPX].[TF_OPTWEB_GET_VERTS]
(	
@D DATE, @T TIME(0), @TD INT, @UPRANGE INT, @DOWNRANGE INT
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT Expiry, T, CP, W, SS, LS, O, SID, LID FROM (
			SELECT VV.*, ROW_NUMBER() OVER(PARTITION BY VV.CP, VV.W, VV.SID, VV.LID, VV.SS, VV.LS ORDER BY VV.T ASC) Rn
			FROM (
				SELECT CP, W, SID, LID, SS, LS
				FROM SPX_VERT.SPX.VERT V
				INNER JOIN SPX_OPT.SPX.UL UL ON CAST(UL.T AS TIME(0))=V.T AND CAST(UL.T AS DATE) = V.Expiry
				WHERE V.Expiry = @D 
					AND V.T BETWEEN @T AND DATEADD(MINUTE, @TD, @T)
					AND ((V.CP = -1 AND V.SS BETWEEN UL.Mark - @DOWNRANGE AND UL.Mark + @UPRANGE)
						OR (V.CP = 1 AND V.SS BETWEEN UL.Mark - @UPRANGE AND UL.Mark + @DOWNRANGE))
					AND V.O > .5
				GROUP BY CP, W, SID, LID, SS, LS
				)
			V
			INNER JOIN SPX_VERT.SPX.VERT VV ON VV.SID=V.SID AND VV.LID=V.LID
			WHERE VV.Expiry = @D 
				AND VV.T BETWEEN @T AND DATEADD(MINUTE, @TD, @T)
			) V
	WHERE Rn = 1
)
GO
/****** Object:  Table [SPX].[STOPS]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [SPX].[STOPS](
	[ID_STOP] [int] IDENTITY(1,1) NOT NULL,
	[PT] [decimal](9, 2) NULL,
	[ST] [decimal](9, 2) NULL,
 CONSTRAINT [PK_ID_STOP] PRIMARY KEY CLUSTERED 
(
	[ID_STOP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [idx_vert_expiry_t_cp]    Script Date: 8/2/2024 12:26:03 PM ******/
CREATE NONCLUSTERED INDEX [idx_vert_expiry_t_cp] ON [SPX].[VERT]
(
	[Expiry] ASC,
	[T] ASC,
	[CP] ASC
)
INCLUDE([W],[SS],[LS]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [missing_index_2260_2259]    Script Date: 8/2/2024 12:26:03 PM ******/
CREATE NONCLUSTERED INDEX [missing_index_2260_2259] ON [SPX].[VERT]
(
	[SID] ASC,
	[LID] ASC,
	[T] ASC
)
INCLUDE([W],[O]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [SPX].[SP_POPULATE_STOPS]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		BW
-- Create date: 05/02/24
-- Description:	Populate the stops table -- used by the strategy engines
-- =============================================
CREATE PROCEDURE [SPX].[SP_POPULATE_STOPS]

AS
BEGIN
	SET NOCOUNT ON;

	IF (SELECT COUNT(*) FROM SPX_VERT.SPX.STOPS) = 0
	BEGIN
		DROP TABLE IF EXISTS #A
		SELECT V INTO #A FROM SPX_VERT.SPX.TF_GET_LISTS(.50, 5, .05)

		INSERT INTO #A SELECT 0 V

		INSERT INTO SPX_VERT.SPX.STOPS (PT, ST)
		SELECT A.V PT, -B.V ST FROM #A A
		CROSS JOIN #A B
	END

END


GO
/****** Object:  StoredProcedure [SPX].[SP_PROCESS_VERTS]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 03/29/2024
-- Description:	CREATES 0 DTE VERTS FOR A GIVEN DAY
-- Can override if = 1
-- =============================================
CREATE PROCEDURE [SPX].[SP_PROCESS_VERTS]
@D DATE, @OVERRIDE INT, @MinTime TIME(0), @W INT
AS
BEGIN

	SET NOCOUNT ON;

	DROP TABLE IF EXISTS #SHORT_OPTS
	DROP TABLE IF EXISTS #LONG_OPTS
	DROP TABLE IF EXISTS #BOTH_OPTS
	DROP TABLE IF EXISTS #BOTH_OPTS_EM
	DROP TABLE IF EXISTS #BOTH_OPTS_EM_UL
	DROP TABLE IF EXISTS #FINAL

	--DECLARE @D DATE = '2024-07-01', @MinTime TIME(0) = '07:00', @W INT = 10

	DECLARE @Expiry DATE = @D, @SPX_Close DECIMAL(9,2), @SPX_Min DECIMAL(9,2), @SPX_Max DECIMAL(9,2), @OPT_Range INT = 50

	IF ((SELECT COUNT(*) FROM SPX_VERT.SPX.VERT WHERE Expiry = @Expiry AND W = @W)=0) OR @OVERRIDE = 1
	BEGIN
		------ GET THE LAST MARK OF THE DAY FOR EXPIRED OPTIONS
		SELECT TOP 1 @SPX_Close=C FROM SPX_OPT.SPX.OHLC_SPX_DAY WHERE D = @Expiry

		SELECT @SPX_Min=CAST(ROUND(MIN(Mark)/5,0)*5 AS INT), @SPX_Max=CAST(ROUND(MAX(Mark)/5,0)*5 AS INT) FROM SPX_OPT.SPX.UL WHERE CAST(T AS DATE) = @Expiry

		IF @SPX_Close IS NOT NULL AND @SPX_Min IS NOT NULL
		BEGIN
			------ GATHER SHORTS -- HINT SHORTS ARE ROUNDED DOWN, SINCE WE COLLECT
			SELECT S.OPT_ID SID, O.Strike SS, O.CP, O.Expiry, S.T, FLOOR(S.O/.05)*.05 SO INTO #SHORT_OPTS
			FROM SPX_OPT.SPX.OPT O
			LEFT JOIN SPX_OPT.SPX.OPTM S ON S.OPT_ID=O.OPT_ID
			WHERE Expiry=@Expiry AND S.OPT_ID IS NOT NULL AND CAST(S.T AS TIME(0)) >= @MinTime AND O.Strike BETWEEN (@SPX_Min-@OPT_Range) AND (@SPX_Max+@OPT_Range)

			------ GATHER LONGS -- HINT LONGS ARE ROUNDED UP, SINCE WE BUY
			SELECT S.OPT_ID LID, O.Strike LS, O.CP, O.Expiry, S.T, CEILING(S.O/.05)*.05 LO INTO #LONG_OPTS
			FROM SPX_OPT.SPX.OPT O
			LEFT JOIN SPX_OPT.SPX.OPTM S ON S.OPT_ID=O.OPT_ID
			WHERE Expiry=@Expiry AND S.OPT_ID IS NOT NULL AND CAST(S.T AS TIME(0)) >= @MinTime AND O.Strike BETWEEN (@SPX_Min-@OPT_Range) AND (@SPX_Max+@OPT_Range)

			------ THIS MERGES THE TWO TABLES TOGETHER AND CREATES UNIQUE LABELS
			SELECT S.Expiry, S.T, S.CP, SID, LID, SS, LS, SO, LO, (SO-LO) O, IIF(S.CP=-1, S.SS-L.LS, L.LS-S.SS) W INTO #BOTH_OPTS
			FROM #SHORT_OPTS S
			FULL OUTER JOIN #LONG_OPTS L 
				ON L.T=S.T AND S.CP=L.CP AND ((S.SS=L.LS+@W AND S.CP=-1) OR (S.SS=L.LS-@W AND S.CP=1))
			WHERE L.T=S.T

			------ THIS BRINGS IN EM
			SELECT O.*, E.EM INTO #BOTH_OPTS_EM FROM #BOTH_OPTS O
			LEFT JOIN SPX_OPT.SPX.EM E ON E.T=O.T

			------ THIS BRINGS IN UL
			SELECT O.*, E.Mark UL INTO #BOTH_OPTS_EM_UL FROM #BOTH_OPTS_EM O
			LEFT JOIN SPX_OPT.SPX.UL E ON E.T=O.T

			------ THIS BUILDS OUT EMX DATA -- THIS IS THE SECRET SAUCE
			SELECT *, CAST(CT/EM AS DECIMAL(9,2)) EMx, 
				IIF(CP = -1,
					IIF(((@SPX_Close-SS)+O) < (O-W), (O-W), IIF(((@SPX_Close-SS)+O) > O, O, ((@SPX_Close-SS)+O))),
					IIF(((SS-@SPX_Close)+O) < (O-W), (O-W), IIF(((SS-@SPX_Close)+O) > O, O, ((SS-@SPX_Close)+O)))
				) ExpRes, @SPX_Close CUL
			INTO #FINAL
			FROM (
				SELECT *,
					CAST(ROUND(IIF(ZZ.CP=-1,-(BE-UL),(BE-UL)),2) AS DECIMAL(9,2)) CT
				FROM (
					SELECT Z.*,
						CAST(O/W AS DECIMAL(5,3)) MPW,
						IIF(CP=-1, SS-O, SS+O) BE
					FROM #BOTH_OPTS_EM_UL Z
				) ZZ
			) ZZZ WHERE CT IS NOT NULL

			----- FINAL FORMATTING
			INSERT INTO SPX_VERT.SPX.VERT
			SELECT A.Expiry, CAST(A.T AS TIME(0)) T, A.CP, A.W, A.SID, A.LID, A.SS, A.LS, A.O, A.EMX, A.ExpRes ER FROM #FINAL A
			LEFT JOIN SPX_VERT.SPX.VERT B ON B.Expiry=A.Expiry AND B.T=CAST(A.T AS TIME(0)) AND B.SID=A.SID AND B.LID=A.LID
			WHERE B.SID IS NULL AND A.O > 0 AND A.O < A.W AND CAST(A.T AS TIME(0)) <= '13:00'

		END
		ELSE
		BEGIN
			SELECT 'MISSING DAILY DATA FOR' M, @Expiry D
		END
	END
END
GO
/****** Object:  StoredProcedure [SPX].[SP_REFRESH_VERT_TABLE]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 040824
-- Description:	REFRESH VERT TABLE
-- =============================================
CREATE PROCEDURE [SPX].[SP_REFRESH_VERT_TABLE]

AS
BEGIN
	SET NOCOUNT ON;

	--TRUNCATE TABLE SPX_VERT.SPX.VERT
	DECLARE @D DATE
	DROP TABLE IF EXISTS #DS
	SELECT CAST(T AS DATE) D INTO #DS FROM SPX_OPT.SPX.OPTM GROUP BY CAST(T AS DATE) ORDER BY CAST(T AS DATE) ASC

	WHILE ((SELECT COUNT(*) FROM #DS)>0)
	BEGIN
		SELECT TOP 1 @D=D FROM #DS
		EXEC SPX_VERT.SPX.SP_PROCESS_VERTS @D, 1, '7:00', 10
		DELETE FROM #DS WHERE D=@D
	END

	ALTER INDEX [missing_index_2260_2259] ON [SPX].[VERT] REBUILD PARTITION = ALL WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

END
GO
/****** Object:  StoredProcedure [SPX].[SP_UNIT_TEST]    Script Date: 8/2/2024 12:26:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		BW
-- Create date: 06/17/2024
-- Description:	UNIT TEST FOR DATES
-- =============================================
CREATE PROCEDURE [SPX].[SP_UNIT_TEST]

AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @H DATE, @EM DATE, @VERT DATE
	SELECT TOP 1 @H=CAST(Dt AS DATE) FROM Historic.Data.DAY_SPX ORDER BY Dt DESC
	SELECT TOP 1 @EM=CAST(T AS DATE) FROM SPX_OPT.SPX.EM ORDER BY T DESC
	SELECT TOP 1 @VERT=Expiry FROM SPX_VERT.SPX.VERT ORDER BY Expiry DESC

	SELECT @H Historic, @EM EM, @VERT VERT

	--DECLARE @D DATE = '2024-06-20'
	--EXEC SPX_VERT.SPX.SP_PROCESS_VERTS @D, 0, '9:00', 10

END
GO
